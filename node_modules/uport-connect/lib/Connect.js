'use strict';

var cov_1ytb5bt5lt = function () {
  var path = '/Users/mxu/code/uport-connect/src/Connect.js',
      hash = 'ef49b12021f6142bc08d8aff270f63441fdbeb8e',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/Users/mxu/code/uport-connect/src/Connect.js',
    statementMap: {
      '0': {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 49
        }
      },
      '1': {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 39
        }
      },
      '2': {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 41
        }
      },
      '3': {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 39
        }
      },
      '4': {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 55
        }
      },
      '5': {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 81
        }
      },
      '6': {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 78
        }
      },
      '7': {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 70
        }
      },
      '8': {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 51,
          column: 67
        }
      },
      '9': {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 51
        }
      },
      '10': {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      '11': {
        start: {
          line: 56,
          column: 6
        },
        end: {
          line: 56,
          column: 73
        }
      },
      '12': {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 54
        }
      },
      '13': {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 20
        }
      },
      '14': {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 39
        }
      },
      '15': {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 66,
          column: 39
        }
      },
      '16': {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 67,
          column: 70
        }
      },
      '17': {
        start: {
          line: 67,
          column: 27
        },
        end: {
          line: 67,
          column: 70
        }
      },
      '18': {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 70,
          column: 24
        }
      },
      '19': {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 71,
          column: 64
        }
      },
      '20': {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 72,
          column: 28
        }
      },
      '21': {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 76,
          column: 6
        }
      },
      '22': {
        start: {
          line: 75,
          column: 27
        },
        end: {
          line: 75,
          column: 123
        }
      },
      '23': {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 76
        }
      },
      '24': {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 78,
          column: 125
        }
      },
      '25': {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 84,
          column: 6
        }
      },
      '26': {
        start: {
          line: 80,
          column: 6
        },
        end: {
          line: 80,
          column: 24
        }
      },
      '27': {
        start: {
          line: 80,
          column: 15
        },
        end: {
          line: 80,
          column: 24
        }
      },
      '28': {
        start: {
          line: 82,
          column: 6
        },
        end: {
          line: 82,
          column: 30
        }
      },
      '29': {
        start: {
          line: 83,
          column: 6
        },
        end: {
          line: 83,
          column: 27
        }
      },
      '30': {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 87,
          column: 110
        }
      },
      '31': {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 88,
          column: 115
        }
      },
      '32': {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 89
        }
      },
      '33': {
        start: {
          line: 107,
          column: 24
        },
        end: {
          line: 130,
          column: 6
        }
      },
      '34': {
        start: {
          line: 109,
          column: 26
        },
        end: {
          line: 109,
          column: 46
        }
      },
      '35': {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 87
        }
      },
      '36': {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 74
        }
      },
      '37': {
        start: {
          line: 111,
          column: 54
        },
        end: {
          line: 111,
          column: 73
        }
      },
      '38': {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 28
        }
      },
      '39': {
        start: {
          line: 115,
          column: 26
        },
        end: {
          line: 115,
          column: 41
        }
      },
      '40': {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 46
        }
      },
      '41': {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 66
        }
      },
      '42': {
        start: {
          line: 117,
          column: 54
        },
        end: {
          line: 117,
          column: 65
        }
      },
      '43': {
        start: {
          line: 120,
          column: 26
        },
        end: {
          line: 120,
          column: 51
        }
      },
      '44': {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 60
        }
      },
      '45': {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 66
        }
      },
      '46': {
        start: {
          line: 122,
          column: 54
        },
        end: {
          line: 122,
          column: 65
        }
      },
      '47': {
        start: {
          line: 125,
          column: 26
        },
        end: {
          line: 125,
          column: 51
        }
      },
      '48': {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 49
        }
      },
      '49': {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 66
        }
      },
      '50': {
        start: {
          line: 127,
          column: 54
        },
        end: {
          line: 127,
          column: 65
        }
      },
      '51': {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 131,
          column: 58
        }
      },
      '52': {
        start: {
          line: 131,
          column: 22
        },
        end: {
          line: 131,
          column: 58
        }
      },
      '53': {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 132,
          column: 22
        }
      },
      '54': {
        start: {
          line: 145,
          column: 26
        },
        end: {
          line: 163,
          column: 5
        }
      },
      '55': {
        start: {
          line: 146,
          column: 6
        },
        end: {
          line: 146,
          column: 68
        }
      },
      '56': {
        start: {
          line: 146,
          column: 21
        },
        end: {
          line: 146,
          column: 68
        }
      },
      '57': {
        start: {
          line: 147,
          column: 6
        },
        end: {
          line: 162,
          column: 7
        }
      },
      '58': {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 31
        }
      },
      '59': {
        start: {
          line: 149,
          column: 24
        },
        end: {
          line: 149,
          column: 38
        }
      },
      '60': {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      '61': {
        start: {
          line: 151,
          column: 10
        },
        end: {
          line: 151,
          column: 58
        }
      },
      '62': {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 159,
          column: 10
        }
      },
      '63': {
        start: {
          line: 156,
          column: 10
        },
        end: {
          line: 156,
          column: 73
        }
      },
      '64': {
        start: {
          line: 156,
          column: 32
        },
        end: {
          line: 156,
          column: 73
        }
      },
      '65': {
        start: {
          line: 157,
          column: 10
        },
        end: {
          line: 157,
          column: 34
        }
      },
      '66': {
        start: {
          line: 158,
          column: 10
        },
        end: {
          line: 158,
          column: 57
        }
      },
      '67': {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 56
        }
      },
      '68': {
        start: {
          line: 165,
          column: 4
        },
        end: {
          line: 169,
          column: 5
        }
      },
      '69': {
        start: {
          line: 166,
          column: 29
        },
        end: {
          line: 166,
          column: 48
        }
      },
      '70': {
        start: {
          line: 167,
          column: 6
        },
        end: {
          line: 167,
          column: 32
        }
      },
      '71': {
        start: {
          line: 168,
          column: 6
        },
        end: {
          line: 168,
          column: 42
        }
      },
      '72': {
        start: {
          line: 171,
          column: 4
        },
        end: {
          line: 185,
          column: 5
        }
      },
      '73': {
        start: {
          line: 172,
          column: 6
        },
        end: {
          line: 177,
          column: 8
        }
      },
      '74': {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      '75': {
        start: {
          line: 174,
          column: 21
        },
        end: {
          line: 174,
          column: 34
        }
      },
      '76': {
        start: {
          line: 175,
          column: 21
        },
        end: {
          line: 175,
          column: 34
        }
      },
      '77': {
        start: {
          line: 179,
          column: 6
        },
        end: {
          line: 184,
          column: 8
        }
      },
      '78': {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 183,
          column: 10
        }
      },
      '79': {
        start: {
          line: 181,
          column: 10
        },
        end: {
          line: 181,
          column: 37
        }
      },
      '80': {
        start: {
          line: 182,
          column: 10
        },
        end: {
          line: 182,
          column: 50
        }
      },
      '81': {
        start: {
          line: 198,
          column: 4
        },
        end: {
          line: 198,
          column: 85
        }
      },
      '82': {
        start: {
          line: 198,
          column: 35
        },
        end: {
          line: 198,
          column: 85
        }
      },
      '83': {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 199,
          column: 86
        }
      },
      '84': {
        start: {
          line: 209,
          column: 4
        },
        end: {
          line: 212,
          column: 6
        }
      },
      '85': {
        start: {
          line: 210,
          column: 6
        },
        end: {
          line: 210,
          column: 24
        }
      },
      '86': {
        start: {
          line: 211,
          column: 6
        },
        end: {
          line: 211,
          column: 59
        }
      },
      '87': {
        start: {
          line: 227,
          column: 4
        },
        end: {
          line: 227,
          column: 51
        }
      },
      '88': {
        start: {
          line: 227,
          column: 13
        },
        end: {
          line: 227,
          column: 51
        }
      },
      '89': {
        start: {
          line: 228,
          column: 4
        },
        end: {
          line: 235,
          column: 5
        }
      },
      '90': {
        start: {
          line: 229,
          column: 6
        },
        end: {
          line: 229,
          column: 49
        }
      },
      '91': {
        start: {
          line: 229,
          column: 32
        },
        end: {
          line: 229,
          column: 49
        }
      },
      '92': {
        start: {
          line: 230,
          column: 6
        },
        end: {
          line: 230,
          column: 66
        }
      },
      '93': {
        start: {
          line: 231,
          column: 11
        },
        end: {
          line: 235,
          column: 5
        }
      },
      '94': {
        start: {
          line: 232,
          column: 6
        },
        end: {
          line: 232,
          column: 83
        }
      },
      '95': {
        start: {
          line: 232,
          column: 54
        },
        end: {
          line: 232,
          column: 82
        }
      },
      '96': {
        start: {
          line: 234,
          column: 6
        },
        end: {
          line: 234,
          column: 87
        }
      },
      '97': {
        start: {
          line: 234,
          column: 58
        },
        end: {
          line: 234,
          column: 86
        }
      },
      '98': {
        start: {
          line: 259,
          column: 25
        },
        end: {
          line: 263,
          column: 5
        }
      },
      '99': {
        start: {
          line: 260,
          column: 6
        },
        end: {
          line: 260,
          column: 31
        }
      },
      '100': {
        start: {
          line: 261,
          column: 6
        },
        end: {
          line: 261,
          column: 30
        }
      },
      '101': {
        start: {
          line: 262,
          column: 6
        },
        end: {
          line: 262,
          column: 54
        }
      },
      '102': {
        start: {
          line: 264,
          column: 4
        },
        end: {
          line: 264,
          column: 56
        }
      },
      '103': {
        start: {
          line: 289,
          column: 4
        },
        end: {
          line: 289,
          column: 52
        }
      },
      '104': {
        start: {
          line: 289,
          column: 19
        },
        end: {
          line: 289,
          column: 52
        }
      },
      '105': {
        start: {
          line: 290,
          column: 4
        },
        end: {
          line: 294,
          column: 5
        }
      },
      '106': {
        start: {
          line: 297,
          column: 4
        },
        end: {
          line: 297,
          column: 61
        }
      },
      '107': {
        start: {
          line: 297,
          column: 13
        },
        end: {
          line: 297,
          column: 61
        }
      },
      '108': {
        start: {
          line: 298,
          column: 4
        },
        end: {
          line: 299,
          column: 48
        }
      },
      '109': {
        start: {
          line: 299,
          column: 19
        },
        end: {
          line: 299,
          column: 47
        }
      },
      '110': {
        start: {
          line: 325,
          column: 4
        },
        end: {
          line: 325,
          column: 37
        }
      },
      '111': {
        start: {
          line: 326,
          column: 4
        },
        end: {
          line: 331,
          column: 5
        }
      },
      '112': {
        start: {
          line: 327,
          column: 6
        },
        end: {
          line: 327,
          column: 96
        }
      },
      '113': {
        start: {
          line: 328,
          column: 6
        },
        end: {
          line: 328,
          column: 24
        }
      },
      '114': {
        start: {
          line: 329,
          column: 11
        },
        end: {
          line: 331,
          column: 5
        }
      },
      '115': {
        start: {
          line: 330,
          column: 6
        },
        end: {
          line: 330,
          column: 79
        }
      },
      '116': {
        start: {
          line: 333,
          column: 4
        },
        end: {
          line: 334,
          column: 48
        }
      },
      '117': {
        start: {
          line: 334,
          column: 19
        },
        end: {
          line: 334,
          column: 47
        }
      },
      '118': {
        start: {
          line: 345,
          column: 17
        },
        end: {
          line: 348,
          column: 5
        }
      },
      '119': {
        start: {
          line: 349,
          column: 4
        },
        end: {
          line: 349,
          column: 46
        }
      },
      '120': {
        start: {
          line: 349,
          column: 22
        },
        end: {
          line: 349,
          column: 46
        }
      },
      '121': {
        start: {
          line: 350,
          column: 4
        },
        end: {
          line: 350,
          column: 111
        }
      },
      '122': {
        start: {
          line: 350,
          column: 82
        },
        end: {
          line: 350,
          column: 110
        }
      },
      '123': {
        start: {
          line: 361,
          column: 17
        },
        end: {
          line: 364,
          column: 5
        }
      },
      '124': {
        start: {
          line: 365,
          column: 4
        },
        end: {
          line: 365,
          column: 46
        }
      },
      '125': {
        start: {
          line: 365,
          column: 22
        },
        end: {
          line: 365,
          column: 46
        }
      },
      '126': {
        start: {
          line: 367,
          column: 4
        },
        end: {
          line: 367,
          column: 100
        }
      },
      '127': {
        start: {
          line: 367,
          column: 71
        },
        end: {
          line: 367,
          column: 99
        }
      },
      '128': {
        start: {
          line: 396,
          column: 4
        },
        end: {
          line: 396,
          column: 53
        }
      },
      '129': {
        start: {
          line: 396,
          column: 20
        },
        end: {
          line: 396,
          column: 53
        }
      },
      '130': {
        start: {
          line: 398,
          column: 4
        },
        end: {
          line: 402,
          column: 14
        }
      },
      '131': {
        start: {
          line: 404,
          column: 4
        },
        end: {
          line: 407,
          column: 5
        }
      },
      '132': {
        start: {
          line: 405,
          column: 6
        },
        end: {
          line: 405,
          column: 40
        }
      },
      '133': {
        start: {
          line: 406,
          column: 6
        },
        end: {
          line: 406,
          column: 41
        }
      },
      '134': {
        start: {
          line: 410,
          column: 4
        },
        end: {
          line: 411,
          column: 48
        }
      },
      '135': {
        start: {
          line: 411,
          column: 19
        },
        end: {
          line: 411,
          column: 47
        }
      },
      '136': {
        start: {
          line: 435,
          column: 4
        },
        end: {
          line: 435,
          column: 59
        }
      },
      '137': {
        start: {
          line: 435,
          column: 26
        },
        end: {
          line: 435,
          column: 59
        }
      },
      '138': {
        start: {
          line: 437,
          column: 15
        },
        end: {
          line: 437,
          column: 35
        }
      },
      '139': {
        start: {
          line: 438,
          column: 4
        },
        end: {
          line: 438,
          column: 66
        }
      },
      '140': {
        start: {
          line: 439,
          column: 4
        },
        end: {
          line: 442,
          column: 6
        }
      },
      '141': {
        start: {
          line: 440,
          column: 18
        },
        end: {
          line: 440,
          column: 104
        }
      },
      '142': {
        start: {
          line: 441,
          column: 6
        },
        end: {
          line: 441,
          column: 34
        }
      },
      '143': {
        start: {
          line: 453,
          column: 4
        },
        end: {
          line: 464,
          column: 5
        }
      },
      '144': {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 455,
          column: 51
        }
      },
      '145': {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 456,
          column: 13
        }
      },
      '146': {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 458,
          column: 41
        }
      },
      '147': {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 459,
          column: 13
        }
      },
      '148': {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 461,
          column: 13
        }
      },
      '149': {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 463,
          column: 61
        }
      },
      '150': {
        start: {
          line: 466,
          column: 21
        },
        end: {
          line: 466,
          column: 32
        }
      },
      '151': {
        start: {
          line: 467,
          column: 4
        },
        end: {
          line: 472,
          column: 5
        }
      },
      '152': {
        start: {
          line: 468,
          column: 6
        },
        end: {
          line: 468,
          column: 48
        }
      },
      '153': {
        start: {
          line: 469,
          column: 11
        },
        end: {
          line: 472,
          column: 5
        }
      },
      '154': {
        start: {
          line: 471,
          column: 6
        },
        end: {
          line: 471,
          column: 58
        }
      },
      '155': {
        start: {
          line: 474,
          column: 4
        },
        end: {
          line: 476,
          column: 5
        }
      },
      '156': {
        start: {
          line: 475,
          column: 6
        },
        end: {
          line: 475,
          column: 75
        }
      },
      '157': {
        start: {
          line: 479,
          column: 4
        },
        end: {
          line: 479,
          column: 50
        }
      },
      '158': {
        start: {
          line: 479,
          column: 23
        },
        end: {
          line: 479,
          column: 50
        }
      },
      '159': {
        start: {
          line: 487,
          column: 4
        },
        end: {
          line: 487,
          column: 63
        }
      },
      '160': {
        start: {
          line: 487,
          column: 23
        },
        end: {
          line: 487,
          column: 63
        }
      },
      '161': {
        start: {
          line: 487,
          column: 46
        },
        end: {
          line: 487,
          column: 62
        }
      },
      '162': {
        start: {
          line: 496,
          column: 4
        },
        end: {
          line: 496,
          column: 54
        }
      },
      '163': {
        start: {
          line: 496,
          column: 28
        },
        end: {
          line: 496,
          column: 52
        }
      },
      '164': {
        start: {
          line: 498,
          column: 4
        },
        end: {
          line: 498,
          column: 29
        }
      },
      '165': {
        start: {
          line: 506,
          column: 4
        },
        end: {
          line: 506,
          column: 17
        }
      },
      '166': {
        start: {
          line: 508,
          column: 4
        },
        end: {
          line: 508,
          column: 47
        }
      },
      '167': {
        start: {
          line: 509,
          column: 4
        },
        end: {
          line: 509,
          column: 82
        }
      },
      '168': {
        start: {
          line: 517,
          column: 24
        },
        end: {
          line: 517,
          column: 42
        }
      },
      '169': {
        start: {
          line: 518,
          column: 24
        },
        end: {
          line: 518,
          column: 46
        }
      },
      '170': {
        start: {
          line: 519,
          column: 24
        },
        end: {
          line: 519,
          column: 51
        }
      },
      '171': {
        start: {
          line: 520,
          column: 24
        },
        end: {
          line: 520,
          column: 47
        }
      },
      '172': {
        start: {
          line: 521,
          column: 24
        },
        end: {
          line: 521,
          column: 50
        }
      },
      '173': {
        start: {
          line: 522,
          column: 24
        },
        end: {
          line: 522,
          column: 55
        }
      },
      '174': {
        start: {
          line: 523,
          column: 24
        },
        end: {
          line: 523,
          column: 51
        }
      },
      '175': {
        start: {
          line: 524,
          column: 24
        },
        end: {
          line: 524,
          column: 52
        }
      },
      '176': {
        start: {
          line: 525,
          column: 24
        },
        end: {
          line: 525,
          column: 55
        }
      },
      '177': {
        start: {
          line: 532,
          column: 36
        },
        end: {
          line: 532,
          column: 87
        }
      },
      '178': {
        start: {
          line: 533,
          column: 36
        },
        end: {
          line: 533,
          column: 56
        }
      },
      '179': {
        start: {
          line: 534,
          column: 36
        },
        end: {
          line: 534,
          column: 56
        }
      },
      '180': {
        start: {
          line: 535,
          column: 36
        },
        end: {
          line: 535,
          column: 57
        }
      },
      '181': {
        start: {
          line: 536,
          column: 36
        },
        end: {
          line: 536,
          column: 60
        }
      },
      '182': {
        start: {
          line: 537,
          column: 36
        },
        end: {
          line: 537,
          column: 61
        }
      },
      '183': {
        start: {
          line: 538,
          column: 36
        },
        end: {
          line: 538,
          column: 62
        }
      },
      '184': {
        start: {
          line: 539,
          column: 36
        },
        end: {
          line: 539,
          column: 65
        }
      },
      '185': {
        start: {
          line: 543,
          column: 4
        },
        end: {
          line: 548,
          column: 5
        }
      },
      '186': {
        start: {
          line: 544,
          column: 6
        },
        end: {
          line: 544,
          column: 36
        }
      },
      '187': {
        start: {
          line: 546,
          column: 6
        },
        end: {
          line: 546,
          column: 42
        }
      },
      '188': {
        start: {
          line: 546,
          column: 36
        },
        end: {
          line: 546,
          column: 42
        }
      },
      '189': {
        start: {
          line: 547,
          column: 6
        },
        end: {
          line: 547,
          column: 113
        }
      },
      '190': {
        start: {
          line: 555,
          column: 4
        },
        end: {
          line: 555,
          column: 91
        }
      },
      '191': {
        start: {
          line: 567,
          column: 4
        },
        end: {
          line: 567,
          column: 46
        }
      },
      '192': {
        start: {
          line: 567,
          column: 40
        },
        end: {
          line: 567,
          column: 46
        }
      },
      '193': {
        start: {
          line: 568,
          column: 4
        },
        end: {
          line: 574,
          column: 5
        }
      },
      '194': {
        start: {
          line: 577,
          column: 4
        },
        end: {
          line: 583,
          column: 8
        }
      },
      '195': {
        start: {
          line: 578,
          column: 19
        },
        end: {
          line: 578,
          column: 31
        }
      },
      '196': {
        start: {
          line: 580,
          column: 8
        },
        end: {
          line: 580,
          column: 42
        }
      },
      '197': {
        start: {
          line: 581,
          column: 8
        },
        end: {
          line: 581,
          column: 40
        }
      },
      '198': {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 582,
          column: 19
        }
      },
      '199': {
        start: {
          line: 587,
          column: 22
        },
        end: {
          line: 587,
          column: 36
        }
      },
      '200': {
        start: {
          line: 591,
          column: 4
        },
        end: {
          line: 591,
          column: 18
        }
      },
      '201': {
        start: {
          line: 595,
          column: 4
        },
        end: {
          line: 595,
          column: 50
        }
      },
      '202': {
        start: {
          line: 599,
          column: 4
        },
        end: {
          line: 599,
          column: 49
        }
      },
      '203': {
        start: {
          line: 618,
          column: 25
        },
        end: {
          line: 626,
          column: 1
        }
      },
      '204': {
        start: {
          line: 618,
          column: 38
        },
        end: {
          line: 626,
          column: 1
        }
      },
      '205': {
        start: {
          line: 619,
          column: 2
        },
        end: {
          line: 625,
          column: 3
        }
      },
      '206': {
        start: {
          line: 620,
          column: 4
        },
        end: {
          line: 620,
          column: 92
        }
      },
      '207': {
        start: {
          line: 620,
          column: 70
        },
        end: {
          line: 620,
          column: 90
        }
      },
      '208': {
        start: {
          line: 622,
          column: 4
        },
        end: {
          line: 622,
          column: 49
        }
      },
      '209': {
        start: {
          line: 624,
          column: 4
        },
        end: {
          line: 624,
          column: 34
        }
      },
      '210': {
        start: {
          line: 635,
          column: 22
        },
        end: {
          line: 651,
          column: 1
        }
      },
      '211': {
        start: {
          line: 636,
          column: 15
        },
        end: {
          line: 636,
          column: 68
        }
      },
      '212': {
        start: {
          line: 638,
          column: 2
        },
        end: {
          line: 650,
          column: 3
        }
      },
      '213': {
        start: {
          line: 639,
          column: 4
        },
        end: {
          line: 649,
          column: 5
        }
      },
      '214': {
        start: {
          line: 640,
          column: 6
        },
        end: {
          line: 644,
          column: 10
        }
      },
      '215': {
        start: {
          line: 642,
          column: 10
        },
        end: {
          line: 642,
          column: 30
        }
      },
      '216': {
        start: {
          line: 643,
          column: 10
        },
        end: {
          line: 643,
          column: 37
        }
      },
      '217': {
        start: {
          line: 647,
          column: 6
        },
        end: {
          line: 647,
          column: 40
        }
      },
      '218': {
        start: {
          line: 648,
          column: 6
        },
        end: {
          line: 648,
          column: 36
        }
      },
      '219': {
        start: {
          line: 659,
          column: 23
        },
        end: {
          line: 664,
          column: 1
        }
      },
      '220': {
        start: {
          line: 660,
          column: 13
        },
        end: {
          line: 660,
          column: 50
        }
      },
      '221': {
        start: {
          line: 661,
          column: 24
        },
        end: {
          line: 661,
          column: 72
        }
      },
      '222': {
        start: {
          line: 662,
          column: 19
        },
        end: {
          line: 662,
          column: 138
        }
      },
      '223': {
        start: {
          line: 663,
          column: 2
        },
        end: {
          line: 663,
          column: 57
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 41,
            column: 2
          },
          end: {
            line: 41,
            column: 3
          }
        },
        loc: {
          start: {
            line: 41,
            column: 35
          },
          end: {
            line: 90,
            column: 3
          }
        },
        line: 41
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 75,
            column: 20
          },
          end: {
            line: 75,
            column: 21
          }
        },
        loc: {
          start: {
            line: 75,
            column: 27
          },
          end: {
            line: 75,
            column: 123
          }
        },
        line: 75
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 79,
            column: 33
          },
          end: {
            line: 79,
            column: 34
          }
        },
        loc: {
          start: {
            line: 79,
            column: 47
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 79
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 106,
            column: 2
          },
          end: {
            line: 106,
            column: 3
          }
        },
        loc: {
          start: {
            line: 106,
            column: 25
          },
          end: {
            line: 133,
            column: 3
          }
        },
        line: 106
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 108,
            column: 22
          },
          end: {
            line: 108,
            column: 23
          }
        },
        loc: {
          start: {
            line: 108,
            column: 28
          },
          end: {
            line: 112,
            column: 7
          }
        },
        line: 108
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 111,
            column: 47
          },
          end: {
            line: 111,
            column: 48
          }
        },
        loc: {
          start: {
            line: 111,
            column: 54
          },
          end: {
            line: 111,
            column: 73
          }
        },
        line: 111
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 113,
            column: 23
          },
          end: {
            line: 113,
            column: 24
          }
        },
        loc: {
          start: {
            line: 113,
            column: 34
          },
          end: {
            line: 118,
            column: 7
          }
        },
        line: 113
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 117,
            column: 47
          },
          end: {
            line: 117,
            column: 48
          }
        },
        loc: {
          start: {
            line: 117,
            column: 54
          },
          end: {
            line: 117,
            column: 65
          }
        },
        line: 117
      },
      '8': {
        name: '(anonymous_8)',
        decl: {
          start: {
            line: 119,
            column: 21
          },
          end: {
            line: 119,
            column: 22
          }
        },
        loc: {
          start: {
            line: 119,
            column: 36
          },
          end: {
            line: 123,
            column: 7
          }
        },
        line: 119
      },
      '9': {
        name: '(anonymous_9)',
        decl: {
          start: {
            line: 122,
            column: 47
          },
          end: {
            line: 122,
            column: 48
          }
        },
        loc: {
          start: {
            line: 122,
            column: 54
          },
          end: {
            line: 122,
            column: 65
          }
        },
        line: 122
      },
      '10': {
        name: '(anonymous_10)',
        decl: {
          start: {
            line: 124,
            column: 20
          },
          end: {
            line: 124,
            column: 21
          }
        },
        loc: {
          start: {
            line: 124,
            column: 30
          },
          end: {
            line: 128,
            column: 7
          }
        },
        line: 124
      },
      '11': {
        name: '(anonymous_11)',
        decl: {
          start: {
            line: 127,
            column: 47
          },
          end: {
            line: 127,
            column: 48
          }
        },
        loc: {
          start: {
            line: 127,
            column: 54
          },
          end: {
            line: 127,
            column: 65
          }
        },
        line: 127
      },
      '12': {
        name: '(anonymous_12)',
        decl: {
          start: {
            line: 144,
            column: 2
          },
          end: {
            line: 144,
            column: 3
          }
        },
        loc: {
          start: {
            line: 144,
            column: 21
          },
          end: {
            line: 186,
            column: 3
          }
        },
        line: 144
      },
      '13': {
        name: '(anonymous_13)',
        decl: {
          start: {
            line: 145,
            column: 26
          },
          end: {
            line: 145,
            column: 27
          }
        },
        loc: {
          start: {
            line: 145,
            column: 35
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 145
      },
      '14': {
        name: '(anonymous_14)',
        decl: {
          start: {
            line: 153,
            column: 45
          },
          end: {
            line: 153,
            column: 46
          }
        },
        loc: {
          start: {
            line: 153,
            column: 58
          },
          end: {
            line: 159,
            column: 9
          }
        },
        line: 153
      },
      '15': {
        name: '(anonymous_15)',
        decl: {
          start: {
            line: 172,
            column: 32
          },
          end: {
            line: 172,
            column: 33
          }
        },
        loc: {
          start: {
            line: 172,
            column: 46
          },
          end: {
            line: 177,
            column: 7
          }
        },
        line: 172
      },
      '16': {
        name: '(anonymous_16)',
        decl: {
          start: {
            line: 174,
            column: 10
          },
          end: {
            line: 174,
            column: 11
          }
        },
        loc: {
          start: {
            line: 174,
            column: 19
          },
          end: {
            line: 174,
            column: 36
          }
        },
        line: 174
      },
      '17': {
        name: '(anonymous_17)',
        decl: {
          start: {
            line: 175,
            column: 10
          },
          end: {
            line: 175,
            column: 11
          }
        },
        loc: {
          start: {
            line: 175,
            column: 19
          },
          end: {
            line: 175,
            column: 36
          }
        },
        line: 175
      },
      '18': {
        name: '(anonymous_18)',
        decl: {
          start: {
            line: 179,
            column: 25
          },
          end: {
            line: 179,
            column: 26
          }
        },
        loc: {
          start: {
            line: 179,
            column: 46
          },
          end: {
            line: 184,
            column: 7
          }
        },
        line: 179
      },
      '19': {
        name: '(anonymous_19)',
        decl: {
          start: {
            line: 180,
            column: 34
          },
          end: {
            line: 180,
            column: 35
          }
        },
        loc: {
          start: {
            line: 180,
            column: 48
          },
          end: {
            line: 183,
            column: 9
          }
        },
        line: 180
      },
      '20': {
        name: '(anonymous_20)',
        decl: {
          start: {
            line: 197,
            column: 2
          },
          end: {
            line: 197,
            column: 3
          }
        },
        loc: {
          start: {
            line: 197,
            column: 25
          },
          end: {
            line: 200,
            column: 3
          }
        },
        line: 197
      },
      '21': {
        name: '(anonymous_21)',
        decl: {
          start: {
            line: 208,
            column: 2
          },
          end: {
            line: 208,
            column: 3
          }
        },
        loc: {
          start: {
            line: 208,
            column: 25
          },
          end: {
            line: 213,
            column: 3
          }
        },
        line: 208
      },
      '22': {
        name: '(anonymous_22)',
        decl: {
          start: {
            line: 209,
            column: 67
          },
          end: {
            line: 209,
            column: 68
          }
        },
        loc: {
          start: {
            line: 209,
            column: 74
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 209
      },
      '23': {
        name: '(anonymous_23)',
        decl: {
          start: {
            line: 226,
            column: 2
          },
          end: {
            line: 226,
            column: 3
          }
        },
        loc: {
          start: {
            line: 226,
            column: 61
          },
          end: {
            line: 236,
            column: 3
          }
        },
        line: 226
      },
      '24': {
        name: '(anonymous_24)',
        decl: {
          start: {
            line: 232,
            column: 47
          },
          end: {
            line: 232,
            column: 48
          }
        },
        loc: {
          start: {
            line: 232,
            column: 54
          },
          end: {
            line: 232,
            column: 82
          }
        },
        line: 232
      },
      '25': {
        name: '(anonymous_25)',
        decl: {
          start: {
            line: 234,
            column: 51
          },
          end: {
            line: 234,
            column: 52
          }
        },
        loc: {
          start: {
            line: 234,
            column: 58
          },
          end: {
            line: 234,
            column: 86
          }
        },
        line: 234
      },
      '26': {
        name: '(anonymous_26)',
        decl: {
          start: {
            line: 258,
            column: 2
          },
          end: {
            line: 258,
            column: 3
          }
        },
        loc: {
          start: {
            line: 258,
            column: 17
          },
          end: {
            line: 265,
            column: 3
          }
        },
        line: 258
      },
      '27': {
        name: '(anonymous_27)',
        decl: {
          start: {
            line: 259,
            column: 25
          },
          end: {
            line: 259,
            column: 26
          }
        },
        loc: {
          start: {
            line: 259,
            column: 50
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 259
      },
      '28': {
        name: '(anonymous_28)',
        decl: {
          start: {
            line: 288,
            column: 2
          },
          end: {
            line: 288,
            column: 3
          }
        },
        loc: {
          start: {
            line: 288,
            column: 51
          },
          end: {
            line: 300,
            column: 3
          }
        },
        line: 288
      },
      '29': {
        name: '(anonymous_29)',
        decl: {
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 299,
            column: 13
          }
        },
        loc: {
          start: {
            line: 299,
            column: 19
          },
          end: {
            line: 299,
            column: 47
          }
        },
        line: 299
      },
      '30': {
        name: '(anonymous_30)',
        decl: {
          start: {
            line: 324,
            column: 2
          },
          end: {
            line: 324,
            column: 3
          }
        },
        loc: {
          start: {
            line: 324,
            column: 87
          },
          end: {
            line: 335,
            column: 3
          }
        },
        line: 324
      },
      '31': {
        name: '(anonymous_31)',
        decl: {
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 334,
            column: 13
          }
        },
        loc: {
          start: {
            line: 334,
            column: 19
          },
          end: {
            line: 334,
            column: 47
          }
        },
        line: 334
      },
      '32': {
        name: '(anonymous_32)',
        decl: {
          start: {
            line: 344,
            column: 2
          },
          end: {
            line: 344,
            column: 3
          }
        },
        loc: {
          start: {
            line: 344,
            column: 74
          },
          end: {
            line: 351,
            column: 3
          }
        },
        line: 344
      },
      '33': {
        name: '(anonymous_33)',
        decl: {
          start: {
            line: 350,
            column: 75
          },
          end: {
            line: 350,
            column: 76
          }
        },
        loc: {
          start: {
            line: 350,
            column: 82
          },
          end: {
            line: 350,
            column: 110
          }
        },
        line: 350
      },
      '34': {
        name: '(anonymous_34)',
        decl: {
          start: {
            line: 360,
            column: 2
          },
          end: {
            line: 360,
            column: 3
          }
        },
        loc: {
          start: {
            line: 360,
            column: 60
          },
          end: {
            line: 368,
            column: 3
          }
        },
        line: 360
      },
      '35': {
        name: '(anonymous_35)',
        decl: {
          start: {
            line: 367,
            column: 64
          },
          end: {
            line: 367,
            column: 65
          }
        },
        loc: {
          start: {
            line: 367,
            column: 71
          },
          end: {
            line: 367,
            column: 99
          }
        },
        line: 367
      },
      '36': {
        name: '(anonymous_36)',
        decl: {
          start: {
            line: 395,
            column: 2
          },
          end: {
            line: 395,
            column: 3
          }
        },
        loc: {
          start: {
            line: 395,
            column: 72
          },
          end: {
            line: 412,
            column: 3
          }
        },
        line: 395
      },
      '37': {
        name: '(anonymous_37)',
        decl: {
          start: {
            line: 411,
            column: 12
          },
          end: {
            line: 411,
            column: 13
          }
        },
        loc: {
          start: {
            line: 411,
            column: 19
          },
          end: {
            line: 411,
            column: 47
          }
        },
        line: 411
      },
      '38': {
        name: '(anonymous_38)',
        decl: {
          start: {
            line: 434,
            column: 2
          },
          end: {
            line: 434,
            column: 3
          }
        },
        loc: {
          start: {
            line: 434,
            column: 74
          },
          end: {
            line: 443,
            column: 3
          }
        },
        line: 434
      },
      '39': {
        name: '(anonymous_39)',
        decl: {
          start: {
            line: 439,
            column: 59
          },
          end: {
            line: 439,
            column: 60
          }
        },
        loc: {
          start: {
            line: 439,
            column: 66
          },
          end: {
            line: 442,
            column: 5
          }
        },
        line: 439
      },
      '40': {
        name: '(anonymous_40)',
        decl: {
          start: {
            line: 452,
            column: 2
          },
          end: {
            line: 452,
            column: 3
          }
        },
        loc: {
          start: {
            line: 452,
            column: 19
          },
          end: {
            line: 480,
            column: 3
          }
        },
        line: 452
      },
      '41': {
        name: '(anonymous_41)',
        decl: {
          start: {
            line: 485,
            column: 2
          },
          end: {
            line: 485,
            column: 3
          }
        },
        loc: {
          start: {
            line: 485,
            column: 14
          },
          end: {
            line: 488,
            column: 3
          }
        },
        line: 485
      },
      '42': {
        name: '(anonymous_42)',
        decl: {
          start: {
            line: 487,
            column: 37
          },
          end: {
            line: 487,
            column: 38
          }
        },
        loc: {
          start: {
            line: 487,
            column: 46
          },
          end: {
            line: 487,
            column: 62
          }
        },
        line: 487
      },
      '43': {
        name: '(anonymous_43)',
        decl: {
          start: {
            line: 494,
            column: 2
          },
          end: {
            line: 494,
            column: 3
          }
        },
        loc: {
          start: {
            line: 494,
            column: 11
          },
          end: {
            line: 499,
            column: 3
          }
        },
        line: 494
      },
      '44': {
        name: '(anonymous_44)',
        decl: {
          start: {
            line: 496,
            column: 18
          },
          end: {
            line: 496,
            column: 19
          }
        },
        loc: {
          start: {
            line: 496,
            column: 28
          },
          end: {
            line: 496,
            column: 52
          }
        },
        line: 496
      },
      '45': {
        name: '(anonymous_45)',
        decl: {
          start: {
            line: 505,
            column: 2
          },
          end: {
            line: 505,
            column: 3
          }
        },
        loc: {
          start: {
            line: 505,
            column: 10
          },
          end: {
            line: 510,
            column: 3
          }
        },
        line: 505
      },
      '46': {
        name: '(anonymous_46)',
        decl: {
          start: {
            line: 517,
            column: 2
          },
          end: {
            line: 517,
            column: 3
          }
        },
        loc: {
          start: {
            line: 517,
            column: 22
          },
          end: {
            line: 517,
            column: 44
          }
        },
        line: 517
      },
      '47': {
        name: '(anonymous_47)',
        decl: {
          start: {
            line: 518,
            column: 2
          },
          end: {
            line: 518,
            column: 3
          }
        },
        loc: {
          start: {
            line: 518,
            column: 22
          },
          end: {
            line: 518,
            column: 48
          }
        },
        line: 518
      },
      '48': {
        name: '(anonymous_48)',
        decl: {
          start: {
            line: 519,
            column: 2
          },
          end: {
            line: 519,
            column: 3
          }
        },
        loc: {
          start: {
            line: 519,
            column: 22
          },
          end: {
            line: 519,
            column: 53
          }
        },
        line: 519
      },
      '49': {
        name: '(anonymous_49)',
        decl: {
          start: {
            line: 520,
            column: 2
          },
          end: {
            line: 520,
            column: 3
          }
        },
        loc: {
          start: {
            line: 520,
            column: 22
          },
          end: {
            line: 520,
            column: 49
          }
        },
        line: 520
      },
      '50': {
        name: '(anonymous_50)',
        decl: {
          start: {
            line: 521,
            column: 2
          },
          end: {
            line: 521,
            column: 3
          }
        },
        loc: {
          start: {
            line: 521,
            column: 22
          },
          end: {
            line: 521,
            column: 52
          }
        },
        line: 521
      },
      '51': {
        name: '(anonymous_51)',
        decl: {
          start: {
            line: 522,
            column: 2
          },
          end: {
            line: 522,
            column: 3
          }
        },
        loc: {
          start: {
            line: 522,
            column: 22
          },
          end: {
            line: 522,
            column: 57
          }
        },
        line: 522
      },
      '52': {
        name: '(anonymous_52)',
        decl: {
          start: {
            line: 523,
            column: 2
          },
          end: {
            line: 523,
            column: 3
          }
        },
        loc: {
          start: {
            line: 523,
            column: 22
          },
          end: {
            line: 523,
            column: 53
          }
        },
        line: 523
      },
      '53': {
        name: '(anonymous_53)',
        decl: {
          start: {
            line: 524,
            column: 2
          },
          end: {
            line: 524,
            column: 3
          }
        },
        loc: {
          start: {
            line: 524,
            column: 22
          },
          end: {
            line: 524,
            column: 54
          }
        },
        line: 524
      },
      '54': {
        name: '(anonymous_54)',
        decl: {
          start: {
            line: 525,
            column: 2
          },
          end: {
            line: 525,
            column: 3
          }
        },
        loc: {
          start: {
            line: 525,
            column: 22
          },
          end: {
            line: 525,
            column: 57
          }
        },
        line: 525
      },
      '55': {
        name: '(anonymous_55)',
        decl: {
          start: {
            line: 532,
            column: 2
          },
          end: {
            line: 532,
            column: 3
          }
        },
        loc: {
          start: {
            line: 532,
            column: 34
          },
          end: {
            line: 532,
            column: 89
          }
        },
        line: 532
      },
      '56': {
        name: '(anonymous_56)',
        decl: {
          start: {
            line: 533,
            column: 2
          },
          end: {
            line: 533,
            column: 3
          }
        },
        loc: {
          start: {
            line: 533,
            column: 34
          },
          end: {
            line: 533,
            column: 58
          }
        },
        line: 533
      },
      '57': {
        name: '(anonymous_57)',
        decl: {
          start: {
            line: 534,
            column: 2
          },
          end: {
            line: 534,
            column: 3
          }
        },
        loc: {
          start: {
            line: 534,
            column: 34
          },
          end: {
            line: 534,
            column: 58
          }
        },
        line: 534
      },
      '58': {
        name: '(anonymous_58)',
        decl: {
          start: {
            line: 535,
            column: 2
          },
          end: {
            line: 535,
            column: 3
          }
        },
        loc: {
          start: {
            line: 535,
            column: 34
          },
          end: {
            line: 535,
            column: 59
          }
        },
        line: 535
      },
      '59': {
        name: '(anonymous_59)',
        decl: {
          start: {
            line: 536,
            column: 2
          },
          end: {
            line: 536,
            column: 3
          }
        },
        loc: {
          start: {
            line: 536,
            column: 34
          },
          end: {
            line: 536,
            column: 62
          }
        },
        line: 536
      },
      '60': {
        name: '(anonymous_60)',
        decl: {
          start: {
            line: 537,
            column: 2
          },
          end: {
            line: 537,
            column: 3
          }
        },
        loc: {
          start: {
            line: 537,
            column: 34
          },
          end: {
            line: 537,
            column: 63
          }
        },
        line: 537
      },
      '61': {
        name: '(anonymous_61)',
        decl: {
          start: {
            line: 538,
            column: 2
          },
          end: {
            line: 538,
            column: 3
          }
        },
        loc: {
          start: {
            line: 538,
            column: 34
          },
          end: {
            line: 538,
            column: 64
          }
        },
        line: 538
      },
      '62': {
        name: '(anonymous_62)',
        decl: {
          start: {
            line: 539,
            column: 2
          },
          end: {
            line: 539,
            column: 3
          }
        },
        loc: {
          start: {
            line: 539,
            column: 34
          },
          end: {
            line: 539,
            column: 67
          }
        },
        line: 539
      },
      '63': {
        name: '(anonymous_63)',
        decl: {
          start: {
            line: 542,
            column: 2
          },
          end: {
            line: 542,
            column: 3
          }
        },
        loc: {
          start: {
            line: 542,
            column: 24
          },
          end: {
            line: 549,
            column: 3
          }
        },
        line: 542
      },
      '64': {
        name: '(anonymous_64)',
        decl: {
          start: {
            line: 554,
            column: 2
          },
          end: {
            line: 554,
            column: 3
          }
        },
        loc: {
          start: {
            line: 554,
            column: 22
          },
          end: {
            line: 556,
            column: 3
          }
        },
        line: 554
      },
      '65': {
        name: '(anonymous_65)',
        decl: {
          start: {
            line: 566,
            column: 2
          },
          end: {
            line: 566,
            column: 3
          }
        },
        loc: {
          start: {
            line: 566,
            column: 33
          },
          end: {
            line: 584,
            column: 3
          }
        },
        line: 566
      },
      '66': {
        name: '(anonymous_66)',
        decl: {
          start: {
            line: 578,
            column: 12
          },
          end: {
            line: 578,
            column: 13
          }
        },
        loc: {
          start: {
            line: 578,
            column: 19
          },
          end: {
            line: 578,
            column: 31
          }
        },
        line: 578
      },
      '67': {
        name: '(anonymous_67)',
        decl: {
          start: {
            line: 579,
            column: 12
          },
          end: {
            line: 579,
            column: 13
          }
        },
        loc: {
          start: {
            line: 579,
            column: 20
          },
          end: {
            line: 583,
            column: 7
          }
        },
        line: 579
      },
      '68': {
        name: '(anonymous_68)',
        decl: {
          start: {
            line: 590,
            column: 2
          },
          end: {
            line: 590,
            column: 3
          }
        },
        loc: {
          start: {
            line: 590,
            column: 36
          },
          end: {
            line: 592,
            column: 3
          }
        },
        line: 590
      },
      '69': {
        name: '(anonymous_69)',
        decl: {
          start: {
            line: 594,
            column: 2
          },
          end: {
            line: 594,
            column: 3
          }
        },
        loc: {
          start: {
            line: 594,
            column: 8
          },
          end: {
            line: 596,
            column: 3
          }
        },
        line: 594
      },
      '70': {
        name: '(anonymous_70)',
        decl: {
          start: {
            line: 598,
            column: 2
          },
          end: {
            line: 598,
            column: 3
          }
        },
        loc: {
          start: {
            line: 598,
            column: 16
          },
          end: {
            line: 600,
            column: 3
          }
        },
        line: 598
      },
      '71': {
        name: '(anonymous_71)',
        decl: {
          start: {
            line: 618,
            column: 25
          },
          end: {
            line: 618,
            column: 26
          }
        },
        loc: {
          start: {
            line: 618,
            column: 38
          },
          end: {
            line: 626,
            column: 1
          }
        },
        line: 618
      },
      '72': {
        name: '(anonymous_72)',
        decl: {
          start: {
            line: 618,
            column: 38
          },
          end: {
            line: 618,
            column: 39
          }
        },
        loc: {
          start: {
            line: 618,
            column: 67
          },
          end: {
            line: 626,
            column: 1
          }
        },
        line: 618
      },
      '73': {
        name: '(anonymous_73)',
        decl: {
          start: {
            line: 620,
            column: 62
          },
          end: {
            line: 620,
            column: 63
          }
        },
        loc: {
          start: {
            line: 620,
            column: 70
          },
          end: {
            line: 620,
            column: 90
          }
        },
        line: 620
      },
      '74': {
        name: '(anonymous_74)',
        decl: {
          start: {
            line: 635,
            column: 22
          },
          end: {
            line: 635,
            column: 23
          }
        },
        loc: {
          start: {
            line: 635,
            column: 51
          },
          end: {
            line: 651,
            column: 1
          }
        },
        line: 635
      },
      '75': {
        name: '(anonymous_75)',
        decl: {
          start: {
            line: 638,
            column: 9
          },
          end: {
            line: 638,
            column: 10
          }
        },
        loc: {
          start: {
            line: 638,
            column: 50
          },
          end: {
            line: 650,
            column: 3
          }
        },
        line: 638
      },
      '76': {
        name: '(anonymous_76)',
        decl: {
          start: {
            line: 641,
            column: 14
          },
          end: {
            line: 641,
            column: 15
          }
        },
        loc: {
          start: {
            line: 641,
            column: 21
          },
          end: {
            line: 644,
            column: 9
          }
        },
        line: 641
      },
      '77': {
        name: '(anonymous_77)',
        decl: {
          start: {
            line: 659,
            column: 23
          },
          end: {
            line: 659,
            column: 24
          }
        },
        loc: {
          start: {
            line: 659,
            column: 31
          },
          end: {
            line: 664,
            column: 1
          }
        },
        line: 659
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 41,
            column: 24
          },
          end: {
            line: 41,
            column: 33
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 41,
            column: 31
          },
          end: {
            line: 41,
            column: 33
          }
        }],
        line: 41
      },
      '1': {
        loc: {
          start: {
            line: 43,
            column: 19
          },
          end: {
            line: 43,
            column: 49
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 43,
            column: 19
          },
          end: {
            line: 43,
            column: 26
          }
        }, {
          start: {
            line: 43,
            column: 30
          },
          end: {
            line: 43,
            column: 49
          }
        }],
        line: 43
      },
      '2': {
        loc: {
          start: {
            line: 48,
            column: 23
          },
          end: {
            line: 48,
            column: 81
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 48,
            column: 53
          },
          end: {
            line: 48,
            column: 62
          }
        }, {
          start: {
            line: 48,
            column: 65
          },
          end: {
            line: 48,
            column: 81
          }
        }],
        line: 48
      },
      '3': {
        loc: {
          start: {
            line: 49,
            column: 22
          },
          end: {
            line: 49,
            column: 78
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 49,
            column: 52
          },
          end: {
            line: 49,
            column: 62
          }
        }, {
          start: {
            line: 49,
            column: 65
          },
          end: {
            line: 49,
            column: 78
          }
        }],
        line: 49
      },
      '4': {
        loc: {
          start: {
            line: 50,
            column: 20
          },
          end: {
            line: 50,
            column: 70
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 50,
            column: 50
          },
          end: {
            line: 50,
            column: 54
          }
        }, {
          start: {
            line: 50,
            column: 57
          },
          end: {
            line: 50,
            column: 70
          }
        }],
        line: 50
      },
      '5': {
        loc: {
          start: {
            line: 51,
            column: 19
          },
          end: {
            line: 51,
            column: 67
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 51,
            column: 48
          },
          end: {
            line: 51,
            column: 52
          }
        }, {
          start: {
            line: 51,
            column: 55
          },
          end: {
            line: 51,
            column: 67
          }
        }],
        line: 51
      },
      '6': {
        loc: {
          start: {
            line: 52,
            column: 14
          },
          end: {
            line: 52,
            column: 51
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 52,
            column: 39
          },
          end: {
            line: 52,
            column: 46
          }
        }, {
          start: {
            line: 52,
            column: 49
          },
          end: {
            line: 52,
            column: 51
          }
        }],
        line: 52
      },
      '7': {
        loc: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        }, {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        }],
        line: 55
      },
      '8': {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 55,
            column: 95
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 55,
            column: 58
          }
        }, {
          start: {
            line: 55,
            column: 62
          },
          end: {
            line: 55,
            column: 95
          }
        }],
        line: 55
      },
      '9': {
        loc: {
          start: {
            line: 60,
            column: 17
          },
          end: {
            line: 60,
            column: 54
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 60,
            column: 17
          },
          end: {
            line: 60,
            column: 27
          }
        }, {
          start: {
            line: 60,
            column: 31
          },
          end: {
            line: 60,
            column: 54
          }
        }],
        line: 60
      },
      '10': {
        loc: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 39
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 39
          }
        }, {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 39
          }
        }],
        line: 66
      },
      '11': {
        loc: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 70
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 70
          }
        }, {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 70
          }
        }],
        line: 67
      },
      '12': {
        loc: {
          start: {
            line: 71,
            column: 21
          },
          end: {
            line: 71,
            column: 64
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 71,
            column: 21
          },
          end: {
            line: 71,
            column: 35
          }
        }, {
          start: {
            line: 71,
            column: 39
          },
          end: {
            line: 71,
            column: 64
          }
        }],
        line: 71
      },
      '13': {
        loc: {
          start: {
            line: 73,
            column: 27
          },
          end: {
            line: 76,
            column: 6
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 73,
            column: 27
          },
          end: {
            line: 73,
            column: 47
          }
        }, {
          start: {
            line: 73,
            column: 51
          },
          end: {
            line: 76,
            column: 6
          }
        }],
        line: 73
      },
      '14': {
        loc: {
          start: {
            line: 75,
            column: 27
          },
          end: {
            line: 75,
            column: 123
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 75,
            column: 47
          },
          end: {
            line: 75,
            column: 83
          }
        }, {
          start: {
            line: 75,
            column: 86
          },
          end: {
            line: 75,
            column: 123
          }
        }],
        line: 75
      },
      '15': {
        loc: {
          start: {
            line: 77,
            column: 26
          },
          end: {
            line: 77,
            column: 76
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 77,
            column: 26
          },
          end: {
            line: 77,
            column: 45
          }
        }, {
          start: {
            line: 77,
            column: 49
          },
          end: {
            line: 77,
            column: 76
          }
        }],
        line: 77
      },
      '16': {
        loc: {
          start: {
            line: 78,
            column: 25
          },
          end: {
            line: 78,
            column: 125
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 78,
            column: 65
          },
          end: {
            line: 78,
            column: 113
          }
        }, {
          start: {
            line: 78,
            column: 116
          },
          end: {
            line: 78,
            column: 125
          }
        }],
        line: 78
      },
      '17': {
        loc: {
          start: {
            line: 78,
            column: 26
          },
          end: {
            line: 78,
            column: 61
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 78,
            column: 26
          },
          end: {
            line: 78,
            column: 40
          }
        }, {
          start: {
            line: 78,
            column: 44
          },
          end: {
            line: 78,
            column: 61
          }
        }],
        line: 78
      },
      '18': {
        loc: {
          start: {
            line: 80,
            column: 6
          },
          end: {
            line: 80,
            column: 24
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 80,
            column: 6
          },
          end: {
            line: 80,
            column: 24
          }
        }, {
          start: {
            line: 80,
            column: 6
          },
          end: {
            line: 80,
            column: 24
          }
        }],
        line: 80
      },
      '19': {
        loc: {
          start: {
            line: 87,
            column: 20
          },
          end: {
            line: 87,
            column: 110
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 87,
            column: 20
          },
          end: {
            line: 87,
            column: 33
          }
        }, {
          start: {
            line: 87,
            column: 37
          },
          end: {
            line: 87,
            column: 110
          }
        }],
        line: 87
      },
      '20': {
        loc: {
          start: {
            line: 110,
            column: 45
          },
          end: {
            line: 110,
            column: 74
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 110,
            column: 45
          },
          end: {
            line: 110,
            column: 61
          }
        }, {
          start: {
            line: 110,
            column: 65
          },
          end: {
            line: 110,
            column: 74
          }
        }],
        line: 110
      },
      '21': {
        loc: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 58
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 58
          }
        }, {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 58
          }
        }],
        line: 131
      },
      '22': {
        loc: {
          start: {
            line: 146,
            column: 6
          },
          end: {
            line: 146,
            column: 68
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 146,
            column: 6
          },
          end: {
            line: 146,
            column: 68
          }
        }, {
          start: {
            line: 146,
            column: 6
          },
          end: {
            line: 146,
            column: 68
          }
        }],
        line: 146
      },
      '23': {
        loc: {
          start: {
            line: 147,
            column: 6
          },
          end: {
            line: 162,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 147,
            column: 6
          },
          end: {
            line: 162,
            column: 7
          }
        }, {
          start: {
            line: 147,
            column: 6
          },
          end: {
            line: 162,
            column: 7
          }
        }],
        line: 147
      },
      '24': {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }],
        line: 150
      },
      '25': {
        loc: {
          start: {
            line: 156,
            column: 10
          },
          end: {
            line: 156,
            column: 73
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 156,
            column: 10
          },
          end: {
            line: 156,
            column: 73
          }
        }, {
          start: {
            line: 156,
            column: 10
          },
          end: {
            line: 156,
            column: 73
          }
        }],
        line: 156
      },
      '26': {
        loc: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        }, {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        }],
        line: 165
      },
      '27': {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 165,
            column: 60
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 165,
            column: 27
          }
        }, {
          start: {
            line: 165,
            column: 31
          },
          end: {
            line: 165,
            column: 60
          }
        }],
        line: 165
      },
      '28': {
        loc: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        }, {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        }],
        line: 171
      },
      '29': {
        loc: {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 198,
            column: 85
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 198,
            column: 85
          }
        }, {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 198,
            column: 85
          }
        }],
        line: 198
      },
      '30': {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 198,
            column: 33
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 198,
            column: 17
          }
        }, {
          start: {
            line: 198,
            column: 21
          },
          end: {
            line: 198,
            column: 33
          }
        }],
        line: 198
      },
      '31': {
        loc: {
          start: {
            line: 226,
            column: 21
          },
          end: {
            line: 226,
            column: 59
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 226,
            column: 57
          },
          end: {
            line: 226,
            column: 59
          }
        }],
        line: 226
      },
      '32': {
        loc: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 51
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 51
          }
        }, {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 51
          }
        }],
        line: 227
      },
      '33': {
        loc: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        }, {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        }],
        line: 228
      },
      '34': {
        loc: {
          start: {
            line: 229,
            column: 6
          },
          end: {
            line: 229,
            column: 49
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 229,
            column: 6
          },
          end: {
            line: 229,
            column: 49
          }
        }, {
          start: {
            line: 229,
            column: 6
          },
          end: {
            line: 229,
            column: 49
          }
        }],
        line: 229
      },
      '35': {
        loc: {
          start: {
            line: 231,
            column: 11
          },
          end: {
            line: 235,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 231,
            column: 11
          },
          end: {
            line: 235,
            column: 5
          }
        }, {
          start: {
            line: 231,
            column: 11
          },
          end: {
            line: 235,
            column: 5
          }
        }],
        line: 231
      },
      '36': {
        loc: {
          start: {
            line: 231,
            column: 15
          },
          end: {
            line: 231,
            column: 49
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 231,
            column: 15
          },
          end: {
            line: 231,
            column: 27
          }
        }, {
          start: {
            line: 231,
            column: 31
          },
          end: {
            line: 231,
            column: 49
          }
        }],
        line: 231
      },
      '37': {
        loc: {
          start: {
            line: 288,
            column: 25
          },
          end: {
            line: 288,
            column: 35
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 288,
            column: 33
          },
          end: {
            line: 288,
            column: 35
          }
        }],
        line: 288
      },
      '38': {
        loc: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 52
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 52
          }
        }, {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 52
          }
        }],
        line: 289
      },
      '39': {
        loc: {
          start: {
            line: 292,
            column: 10
          },
          end: {
            line: 292,
            column: 93
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 292,
            column: 29
          },
          end: {
            line: 292,
            column: 37
          }
        }, {
          start: {
            line: 292,
            column: 40
          },
          end: {
            line: 292,
            column: 93
          }
        }],
        line: 292
      },
      '40': {
        loc: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 61
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 61
          }
        }, {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 61
          }
        }],
        line: 297
      },
      '41': {
        loc: {
          start: {
            line: 297,
            column: 18
          },
          end: {
            line: 297,
            column: 61
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 297,
            column: 29
          },
          end: {
            line: 297,
            column: 51
          }
        }, {
          start: {
            line: 297,
            column: 54
          },
          end: {
            line: 297,
            column: 61
          }
        }],
        line: 297
      },
      '42': {
        loc: {
          start: {
            line: 324,
            column: 59
          },
          end: {
            line: 324,
            column: 75
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 324,
            column: 64
          },
          end: {
            line: 324,
            column: 75
          }
        }],
        line: 324
      },
      '43': {
        loc: {
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        }, {
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        }],
        line: 326
      },
      '44': {
        loc: {
          start: {
            line: 329,
            column: 11
          },
          end: {
            line: 331,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 329,
            column: 11
          },
          end: {
            line: 331,
            column: 5
          }
        }, {
          start: {
            line: 329,
            column: 11
          },
          end: {
            line: 331,
            column: 5
          }
        }],
        line: 329
      },
      '45': {
        loc: {
          start: {
            line: 329,
            column: 15
          },
          end: {
            line: 329,
            column: 33
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 329,
            column: 15
          },
          end: {
            line: 329,
            column: 20
          }
        }, {
          start: {
            line: 329,
            column: 24
          },
          end: {
            line: 329,
            column: 33
          }
        }],
        line: 329
      },
      '46': {
        loc: {
          start: {
            line: 344,
            column: 40
          },
          end: {
            line: 344,
            column: 62
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 344,
            column: 45
          },
          end: {
            line: 344,
            column: 62
          }
        }],
        line: 344
      },
      '47': {
        loc: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 46
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 46
          }
        }, {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 46
          }
        }],
        line: 349
      },
      '48': {
        loc: {
          start: {
            line: 360,
            column: 28
          },
          end: {
            line: 360,
            column: 48
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 360,
            column: 31
          },
          end: {
            line: 360,
            column: 48
          }
        }],
        line: 360
      },
      '49': {
        loc: {
          start: {
            line: 365,
            column: 4
          },
          end: {
            line: 365,
            column: 46
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 365,
            column: 4
          },
          end: {
            line: 365,
            column: 46
          }
        }, {
          start: {
            line: 365,
            column: 4
          },
          end: {
            line: 365,
            column: 46
          }
        }],
        line: 365
      },
      '50': {
        loc: {
          start: {
            line: 395,
            column: 27
          },
          end: {
            line: 395,
            column: 38
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 395,
            column: 36
          },
          end: {
            line: 395,
            column: 38
          }
        }],
        line: 395
      },
      '51': {
        loc: {
          start: {
            line: 395,
            column: 40
          },
          end: {
            line: 395,
            column: 60
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 395,
            column: 45
          },
          end: {
            line: 395,
            column: 60
          }
        }],
        line: 395
      },
      '52': {
        loc: {
          start: {
            line: 396,
            column: 4
          },
          end: {
            line: 396,
            column: 53
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 396,
            column: 4
          },
          end: {
            line: 396,
            column: 53
          }
        }, {
          start: {
            line: 396,
            column: 4
          },
          end: {
            line: 396,
            column: 53
          }
        }],
        line: 396
      },
      '53': {
        loc: {
          start: {
            line: 400,
            column: 19
          },
          end: {
            line: 400,
            column: 45
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 400,
            column: 19
          },
          end: {
            line: 400,
            column: 35
          }
        }, {
          start: {
            line: 400,
            column: 39
          },
          end: {
            line: 400,
            column: 45
          }
        }],
        line: 400
      },
      '54': {
        loc: {
          start: {
            line: 404,
            column: 4
          },
          end: {
            line: 407,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 404,
            column: 4
          },
          end: {
            line: 407,
            column: 5
          }
        }, {
          start: {
            line: 404,
            column: 4
          },
          end: {
            line: 407,
            column: 5
          }
        }],
        line: 404
      },
      '55': {
        loc: {
          start: {
            line: 434,
            column: 26
          },
          end: {
            line: 434,
            column: 43
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 434,
            column: 41
          },
          end: {
            line: 434,
            column: 43
          }
        }],
        line: 434
      },
      '56': {
        loc: {
          start: {
            line: 434,
            column: 45
          },
          end: {
            line: 434,
            column: 62
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 434,
            column: 50
          },
          end: {
            line: 434,
            column: 62
          }
        }],
        line: 434
      },
      '57': {
        loc: {
          start: {
            line: 435,
            column: 4
          },
          end: {
            line: 435,
            column: 59
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 435,
            column: 4
          },
          end: {
            line: 435,
            column: 59
          }
        }, {
          start: {
            line: 435,
            column: 4
          },
          end: {
            line: 435,
            column: 59
          }
        }],
        line: 435
      },
      '58': {
        loc: {
          start: {
            line: 453,
            column: 4
          },
          end: {
            line: 464,
            column: 5
          }
        },
        type: 'switch',
        locations: [{
          start: {
            line: 454,
            column: 6
          },
          end: {
            line: 456,
            column: 13
          }
        }, {
          start: {
            line: 457,
            column: 6
          },
          end: {
            line: 459,
            column: 13
          }
        }, {
          start: {
            line: 460,
            column: 6
          },
          end: {
            line: 461,
            column: 13
          }
        }, {
          start: {
            line: 462,
            column: 6
          },
          end: {
            line: 463,
            column: 61
          }
        }],
        line: 453
      },
      '59': {
        loc: {
          start: {
            line: 467,
            column: 4
          },
          end: {
            line: 472,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 467,
            column: 4
          },
          end: {
            line: 472,
            column: 5
          }
        }, {
          start: {
            line: 467,
            column: 4
          },
          end: {
            line: 472,
            column: 5
          }
        }],
        line: 467
      },
      '60': {
        loc: {
          start: {
            line: 469,
            column: 11
          },
          end: {
            line: 472,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 469,
            column: 11
          },
          end: {
            line: 472,
            column: 5
          }
        }, {
          start: {
            line: 469,
            column: 11
          },
          end: {
            line: 472,
            column: 5
          }
        }],
        line: 469
      },
      '61': {
        loc: {
          start: {
            line: 474,
            column: 4
          },
          end: {
            line: 476,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 474,
            column: 4
          },
          end: {
            line: 476,
            column: 5
          }
        }, {
          start: {
            line: 474,
            column: 4
          },
          end: {
            line: 476,
            column: 5
          }
        }],
        line: 474
      },
      '62': {
        loc: {
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 474,
            column: 43
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 474,
            column: 25
          }
        }, {
          start: {
            line: 474,
            column: 29
          },
          end: {
            line: 474,
            column: 43
          }
        }],
        line: 474
      },
      '63': {
        loc: {
          start: {
            line: 479,
            column: 4
          },
          end: {
            line: 479,
            column: 50
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 479,
            column: 4
          },
          end: {
            line: 479,
            column: 50
          }
        }, {
          start: {
            line: 479,
            column: 4
          },
          end: {
            line: 479,
            column: 50
          }
        }],
        line: 479
      },
      '64': {
        loc: {
          start: {
            line: 487,
            column: 4
          },
          end: {
            line: 487,
            column: 63
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 487,
            column: 4
          },
          end: {
            line: 487,
            column: 63
          }
        }, {
          start: {
            line: 487,
            column: 4
          },
          end: {
            line: 487,
            column: 63
          }
        }],
        line: 487
      },
      '65': {
        loc: {
          start: {
            line: 543,
            column: 4
          },
          end: {
            line: 548,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 543,
            column: 4
          },
          end: {
            line: 548,
            column: 5
          }
        }, {
          start: {
            line: 543,
            column: 4
          },
          end: {
            line: 548,
            column: 5
          }
        }],
        line: 543
      },
      '66': {
        loc: {
          start: {
            line: 546,
            column: 6
          },
          end: {
            line: 546,
            column: 42
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 546,
            column: 6
          },
          end: {
            line: 546,
            column: 42
          }
        }, {
          start: {
            line: 546,
            column: 6
          },
          end: {
            line: 546,
            column: 42
          }
        }],
        line: 546
      },
      '67': {
        loc: {
          start: {
            line: 555,
            column: 11
          },
          end: {
            line: 555,
            column: 91
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 555,
            column: 30
          },
          end: {
            line: 555,
            column: 51
          }
        }, {
          start: {
            line: 555,
            column: 54
          },
          end: {
            line: 555,
            column: 91
          }
        }],
        line: 555
      },
      '68': {
        loc: {
          start: {
            line: 567,
            column: 4
          },
          end: {
            line: 567,
            column: 46
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 567,
            column: 4
          },
          end: {
            line: 567,
            column: 46
          }
        }, {
          start: {
            line: 567,
            column: 4
          },
          end: {
            line: 567,
            column: 46
          }
        }],
        line: 567
      },
      '69': {
        loc: {
          start: {
            line: 567,
            column: 8
          },
          end: {
            line: 567,
            column: 38
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 567,
            column: 8
          },
          end: {
            line: 567,
            column: 16
          }
        }, {
          start: {
            line: 567,
            column: 20
          },
          end: {
            line: 567,
            column: 38
          }
        }],
        line: 567
      },
      '70': {
        loc: {
          start: {
            line: 568,
            column: 14
          },
          end: {
            line: 574,
            column: 5
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 568,
            column: 14
          },
          end: {
            line: 568,
            column: 21
          }
        }, {
          start: {
            line: 568,
            column: 25
          },
          end: {
            line: 574,
            column: 5
          }
        }],
        line: 568
      },
      '71': {
        loc: {
          start: {
            line: 571,
            column: 11
          },
          end: {
            line: 571,
            column: 111
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 571,
            column: 45
          },
          end: {
            line: 571,
            column: 99
          }
        }, {
          start: {
            line: 571,
            column: 102
          },
          end: {
            line: 571,
            column: 111
          }
        }],
        line: 571
      },
      '72': {
        loc: {
          start: {
            line: 590,
            column: 15
          },
          end: {
            line: 590,
            column: 34
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 590,
            column: 21
          },
          end: {
            line: 590,
            column: 34
          }
        }],
        line: 590
      },
      '73': {
        loc: {
          start: {
            line: 595,
            column: 22
          },
          end: {
            line: 595,
            column: 49
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 595,
            column: 22
          },
          end: {
            line: 595,
            column: 41
          }
        }, {
          start: {
            line: 595,
            column: 45
          },
          end: {
            line: 595,
            column: 49
          }
        }],
        line: 595
      },
      '74': {
        loc: {
          start: {
            line: 619,
            column: 2
          },
          end: {
            line: 625,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 619,
            column: 2
          },
          end: {
            line: 625,
            column: 3
          }
        }, {
          start: {
            line: 619,
            column: 2
          },
          end: {
            line: 625,
            column: 3
          }
        }],
        line: 619
      },
      '75': {
        loc: {
          start: {
            line: 639,
            column: 4
          },
          end: {
            line: 649,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 639,
            column: 4
          },
          end: {
            line: 649,
            column: 5
          }
        }, {
          start: {
            line: 639,
            column: 4
          },
          end: {
            line: 649,
            column: 5
          }
        }],
        line: 639
      },
      '76': {
        loc: {
          start: {
            line: 661,
            column: 24
          },
          end: {
            line: 661,
            column: 72
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 661,
            column: 24
          },
          end: {
            line: 661,
            column: 51
          }
        }, {
          start: {
            line: 661,
            column: 55
          },
          end: {
            line: 661,
            column: 72
          }
        }],
        line: 661
      },
      '77': {
        loc: {
          start: {
            line: 662,
            column: 19
          },
          end: {
            line: 662,
            column: 138
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 662,
            column: 34
          },
          end: {
            line: 662,
            column: 115
          }
        }, {
          start: {
            line: 662,
            column: 118
          },
          end: {
            line: 662,
            column: 138
          }
        }],
        line: 662
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0,
      '41': 0,
      '42': 0,
      '43': 0,
      '44': 0,
      '45': 0,
      '46': 0,
      '47': 0,
      '48': 0,
      '49': 0,
      '50': 0,
      '51': 0,
      '52': 0,
      '53': 0,
      '54': 0,
      '55': 0,
      '56': 0,
      '57': 0,
      '58': 0,
      '59': 0,
      '60': 0,
      '61': 0,
      '62': 0,
      '63': 0,
      '64': 0,
      '65': 0,
      '66': 0,
      '67': 0,
      '68': 0,
      '69': 0,
      '70': 0,
      '71': 0,
      '72': 0,
      '73': 0,
      '74': 0,
      '75': 0,
      '76': 0,
      '77': 0,
      '78': 0,
      '79': 0,
      '80': 0,
      '81': 0,
      '82': 0,
      '83': 0,
      '84': 0,
      '85': 0,
      '86': 0,
      '87': 0,
      '88': 0,
      '89': 0,
      '90': 0,
      '91': 0,
      '92': 0,
      '93': 0,
      '94': 0,
      '95': 0,
      '96': 0,
      '97': 0,
      '98': 0,
      '99': 0,
      '100': 0,
      '101': 0,
      '102': 0,
      '103': 0,
      '104': 0,
      '105': 0,
      '106': 0,
      '107': 0,
      '108': 0,
      '109': 0,
      '110': 0,
      '111': 0,
      '112': 0,
      '113': 0,
      '114': 0,
      '115': 0,
      '116': 0,
      '117': 0,
      '118': 0,
      '119': 0,
      '120': 0,
      '121': 0,
      '122': 0,
      '123': 0,
      '124': 0,
      '125': 0,
      '126': 0,
      '127': 0,
      '128': 0,
      '129': 0,
      '130': 0,
      '131': 0,
      '132': 0,
      '133': 0,
      '134': 0,
      '135': 0,
      '136': 0,
      '137': 0,
      '138': 0,
      '139': 0,
      '140': 0,
      '141': 0,
      '142': 0,
      '143': 0,
      '144': 0,
      '145': 0,
      '146': 0,
      '147': 0,
      '148': 0,
      '149': 0,
      '150': 0,
      '151': 0,
      '152': 0,
      '153': 0,
      '154': 0,
      '155': 0,
      '156': 0,
      '157': 0,
      '158': 0,
      '159': 0,
      '160': 0,
      '161': 0,
      '162': 0,
      '163': 0,
      '164': 0,
      '165': 0,
      '166': 0,
      '167': 0,
      '168': 0,
      '169': 0,
      '170': 0,
      '171': 0,
      '172': 0,
      '173': 0,
      '174': 0,
      '175': 0,
      '176': 0,
      '177': 0,
      '178': 0,
      '179': 0,
      '180': 0,
      '181': 0,
      '182': 0,
      '183': 0,
      '184': 0,
      '185': 0,
      '186': 0,
      '187': 0,
      '188': 0,
      '189': 0,
      '190': 0,
      '191': 0,
      '192': 0,
      '193': 0,
      '194': 0,
      '195': 0,
      '196': 0,
      '197': 0,
      '198': 0,
      '199': 0,
      '200': 0,
      '201': 0,
      '202': 0,
      '203': 0,
      '204': 0,
      '205': 0,
      '206': 0,
      '207': 0,
      '208': 0,
      '209': 0,
      '210': 0,
      '211': 0,
      '212': 0,
      '213': 0,
      '214': 0,
      '215': 0,
      '216': 0,
      '217': 0,
      '218': 0,
      '219': 0,
      '220': 0,
      '221': 0,
      '222': 0,
      '223': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0,
      '41': 0,
      '42': 0,
      '43': 0,
      '44': 0,
      '45': 0,
      '46': 0,
      '47': 0,
      '48': 0,
      '49': 0,
      '50': 0,
      '51': 0,
      '52': 0,
      '53': 0,
      '54': 0,
      '55': 0,
      '56': 0,
      '57': 0,
      '58': 0,
      '59': 0,
      '60': 0,
      '61': 0,
      '62': 0,
      '63': 0,
      '64': 0,
      '65': 0,
      '66': 0,
      '67': 0,
      '68': 0,
      '69': 0,
      '70': 0,
      '71': 0,
      '72': 0,
      '73': 0,
      '74': 0,
      '75': 0,
      '76': 0,
      '77': 0
    },
    b: {
      '0': [0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0],
      '10': [0, 0],
      '11': [0, 0],
      '12': [0, 0],
      '13': [0, 0],
      '14': [0, 0],
      '15': [0, 0],
      '16': [0, 0],
      '17': [0, 0],
      '18': [0, 0],
      '19': [0, 0],
      '20': [0, 0],
      '21': [0, 0],
      '22': [0, 0],
      '23': [0, 0],
      '24': [0, 0],
      '25': [0, 0],
      '26': [0, 0],
      '27': [0, 0],
      '28': [0, 0],
      '29': [0, 0],
      '30': [0, 0],
      '31': [0],
      '32': [0, 0],
      '33': [0, 0],
      '34': [0, 0],
      '35': [0, 0],
      '36': [0, 0],
      '37': [0],
      '38': [0, 0],
      '39': [0, 0],
      '40': [0, 0],
      '41': [0, 0],
      '42': [0],
      '43': [0, 0],
      '44': [0, 0],
      '45': [0, 0],
      '46': [0],
      '47': [0, 0],
      '48': [0],
      '49': [0, 0],
      '50': [0],
      '51': [0],
      '52': [0, 0],
      '53': [0, 0],
      '54': [0, 0],
      '55': [0],
      '56': [0],
      '57': [0, 0],
      '58': [0, 0, 0, 0],
      '59': [0, 0],
      '60': [0, 0],
      '61': [0, 0],
      '62': [0, 0],
      '63': [0, 0],
      '64': [0, 0],
      '65': [0, 0],
      '66': [0, 0],
      '67': [0, 0],
      '68': [0, 0],
      '69': [0, 0],
      '70': [0, 0],
      '71': [0, 0],
      '72': [0],
      '73': [0, 0],
      '74': [0, 0],
      '75': [0, 0],
      '76': [0, 0],
      '77': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _uportCredentials = require('uport-credentials');

var _didJwt = require('did-jwt');

var _mobileDetect = require('mobile-detect');

var _mobileDetect2 = _interopRequireDefault(_mobileDetect);

var _mnid = require('mnid');

var _uportTransports = require('uport-transports');

var _pubsubJs = require('pubsub-js');

var _pubsubJs2 = _interopRequireDefault(_pubsubJs);

var _store = require('store');

var _store2 = _interopRequireDefault(_store);

var _uportLite = require('uport-lite');

var _uportLite2 = _interopRequireDefault(_uportLite);

var _util = require('./util');

var _UportSubprovider = require('./UportSubprovider');

var _UportSubprovider2 = _interopRequireDefault(_UportSubprovider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Connect = function () {
  /**
   * Instantiates a new uPort Connect object.
   *
   * @example
   * import  Connect  from 'uport-connect'
   * const connect = new Connect('MydappName')
   *
   * @param    {String}      appName                      The name of your app
   * @param    {Object}      [opts]                       optional parameters
   * @param    {String}      [opts.description]           A short description of your app that can be displayed to users when making requests
   * @param    {String}      [opts.profileImage]          A URL for an image to be displayed as the avatar for this app in requests
   * @param    {String}      [opts.bannerImage]           A URL for an image to be displayed as the banner for this app in requests
   * @param    {Object}      [opts.network='rinkeby']     network config object or string name, ie. { id: '0x1', rpcUrl: 'https://mainnet.infura.io' } or 'kovan', 'mainnet', 'ropsten', 'rinkeby'.
   * @param    {String}      [opts.accountType]           Ethereum account type: "general", "segregated", "keypair", or "none"
   * @param    {Boolean}     [opts.isMobile]              Configured by default by detecting client, but can optionally pass boolean to indicate whether this is instantiated on a mobile client
   * @param    {Boolean}     [opts.useStore=true]         When true, object state will be written to local storage on each state change
   * @param    {Object}      [opts.store]                 Storage inteferface with synchronous get() => statObj and set(stateObj) functions, by default store is local storage. For asynchronous storage, set useStore false and handle manually.
   * @param    {Boolean}     [opts.usePush=true]          Use the pushTransport when a pushToken is available. Set to false to force connect to use standard transport
   * @param    {String[]}    [opts.vc]                    An array of verified claims describing this identity
   * @param    {Function}    [opts.transport]             Optional custom transport for desktop, non-push requests
   * @param    {Function}    [opts.mobileTransport]       Optional custom transport for mobile requests
   * @param    {Function}    [opts.mobileUriHandler]      Optional uri handler for mobile requests, if using default transports
   * @param    {Object}      [opts.muportConfig]          Configuration object for muport did resolver. See [muport-did-resolver](https://github.com/uport-project/muport-did-resolver)
   * @param    {Object}      [opts.ethrConfig]            Configuration object for ethr did resolver. See [ethr-did-resolver](https://github.com/uport-project/ethr-did-resolver)
   * @param    {Object}      [opts.registry]              Configuration for uPort DID Resolver (DEPRECATED) See [uport-did-resolver](https://github.com/uport-project/uport-did-resolver)
   * @return   {Connect}                                  self
   */
  function Connect(appName) {
    var _this = this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_1ytb5bt5lt.b[0][0]++, {});
    (0, _classCallCheck3.default)(this, Connect);
    cov_1ytb5bt5lt.f[0]++;
    cov_1ytb5bt5lt.s[0]++;

    // Config
    this.appName = (cov_1ytb5bt5lt.b[1][0]++, appName) || (cov_1ytb5bt5lt.b[1][1]++, 'uport-connect-app');
    cov_1ytb5bt5lt.s[1]++;
    this.description = opts.description;
    cov_1ytb5bt5lt.s[2]++;
    this.profileImage = opts.profileImage;
    cov_1ytb5bt5lt.s[3]++;
    this.bannerImage = opts.bannerImage;
    cov_1ytb5bt5lt.s[4]++;
    this.network = _uportTransports.network.config.network(opts.network);
    cov_1ytb5bt5lt.s[5]++;
    this.accountType = opts.accountType === 'none' ? (cov_1ytb5bt5lt.b[2][0]++, undefined) : (cov_1ytb5bt5lt.b[2][1]++, opts.accountType);
    cov_1ytb5bt5lt.s[6]++;
    this.isOnMobile = opts.isMobile === undefined ? (cov_1ytb5bt5lt.b[3][0]++, (0, _util.isMobile)()) : (cov_1ytb5bt5lt.b[3][1]++, opts.isMobile);
    cov_1ytb5bt5lt.s[7]++;
    this.useStore = opts.useStore === undefined ? (cov_1ytb5bt5lt.b[4][0]++, true) : (cov_1ytb5bt5lt.b[4][1]++, opts.useStore);
    cov_1ytb5bt5lt.s[8]++;
    this.usePush = opts.usePush === undefined ? (cov_1ytb5bt5lt.b[5][0]++, true) : (cov_1ytb5bt5lt.b[5][1]++, opts.usePush);
    cov_1ytb5bt5lt.s[9]++;
    this.vc = Array.isArray(opts.vc) ? (cov_1ytb5bt5lt.b[6][0]++, opts.vc) : (cov_1ytb5bt5lt.b[6][1]++, []);

    // Disallow segregated account on mainnet
    cov_1ytb5bt5lt.s[10]++;
    if ((cov_1ytb5bt5lt.b[8][0]++, this.network === _uportTransports.network.defaults.networks.mainnet) && (cov_1ytb5bt5lt.b[8][1]++, this.accountType === 'segregated')) {
      cov_1ytb5bt5lt.b[7][0]++;
      cov_1ytb5bt5lt.s[11]++;

      throw new Error('Segregated accounts are not supported on mainnet');
    } else {
      cov_1ytb5bt5lt.b[7][1]++;
    }

    // Storage
    cov_1ytb5bt5lt.s[12]++;
    this.store = (cov_1ytb5bt5lt.b[9][0]++, opts.store) || (cov_1ytb5bt5lt.b[9][1]++, new LocalStorageStore());

    // Initialize private state
    cov_1ytb5bt5lt.s[13]++;
    this._state = {};

    // Load any existing state if any
    cov_1ytb5bt5lt.s[14]++;
    if (this.useStore) {
        cov_1ytb5bt5lt.b[10][0]++;
        cov_1ytb5bt5lt.s[15]++;
        this.loadState();
      } else {
      cov_1ytb5bt5lt.b[10][1]++;
    }cov_1ytb5bt5lt.s[16]++;
    if (!this.keypair.did) {
        cov_1ytb5bt5lt.b[11][0]++;
        cov_1ytb5bt5lt.s[17]++;
        this.keypair = _uportCredentials.Credentials.createIdentity();
      } else {
      cov_1ytb5bt5lt.b[11][1]++;
    } // Transports
    cov_1ytb5bt5lt.s[18]++;
    this.PubSub = _pubsubJs2.default;
    cov_1ytb5bt5lt.s[19]++;
    this.transport = (cov_1ytb5bt5lt.b[12][0]++, opts.transport) || (cov_1ytb5bt5lt.b[12][1]++, connectTransport(appName));
    cov_1ytb5bt5lt.s[20]++;
    this.useDeeplinks = true;
    cov_1ytb5bt5lt.s[21]++;
    this.mobileTransport = (cov_1ytb5bt5lt.b[13][0]++, opts.mobileTransport) || (cov_1ytb5bt5lt.b[13][1]++, _uportTransports.transport.url.send({
      uriHandler: opts.mobileUriHandler,
      messageToURI: function messageToURI(m) {
        cov_1ytb5bt5lt.f[1]++;
        cov_1ytb5bt5lt.s[22]++;
        return _this.useDeeplinks ? (cov_1ytb5bt5lt.b[14][0]++, _uportTransports.message.util.messageToDeeplinkURI(m)) : (cov_1ytb5bt5lt.b[14][1]++, _uportTransports.message.util.messageToUniversalURI(m));
      }
    }));
    cov_1ytb5bt5lt.s[23]++;
    this.onloadResponse = (cov_1ytb5bt5lt.b[15][0]++, opts.onloadResponse) || (cov_1ytb5bt5lt.b[15][1]++, _uportTransports.transport.url.getResponse());
    cov_1ytb5bt5lt.s[24]++;
    this.pushTransport = (cov_1ytb5bt5lt.b[17][0]++, this.pushToken) && (cov_1ytb5bt5lt.b[17][1]++, this.publicEncKey) ? (cov_1ytb5bt5lt.b[16][0]++, pushTransport(this.pushToken, this.publicEncKey)) : (cov_1ytb5bt5lt.b[16][1]++, undefined);
    cov_1ytb5bt5lt.s[25]++;
    _uportTransports.transport.url.listenResponse(function (err, res) {
      cov_1ytb5bt5lt.f[2]++;
      cov_1ytb5bt5lt.s[26]++;

      if (err) {
          cov_1ytb5bt5lt.b[18][0]++;
          cov_1ytb5bt5lt.s[27]++;
          throw err;
        } else {
        cov_1ytb5bt5lt.b[18][1]++;
      } // Switch to deep links after first universal link success
      cov_1ytb5bt5lt.s[28]++;
      _this.useDeeplinks = true;
      cov_1ytb5bt5lt.s[29]++;
      _this.pubResponse(res);
    });

    // Credential (uport-js) config for verification
    cov_1ytb5bt5lt.s[30]++;
    this.registry = (cov_1ytb5bt5lt.b[19][0]++, opts.registry) || (cov_1ytb5bt5lt.b[19][1]++, (0, _uportLite2.default)({ networks: _uportTransports.network.config.networkToNetworkSet(this.network) }));
    cov_1ytb5bt5lt.s[31]++;
    this.resolverConfigs = { registry: this.registry, ethrConfig: opts.ethrConfig, muportConfig: opts.muportConfig };
    cov_1ytb5bt5lt.s[32]++;
    this.credentials = new _uportCredentials.Credentials((0, _assign2.default)(this.keypair, this.resolverConfigs)); // TODO can resolver configs not be passed through
  }

  /**
   *  Instantiates and returns a web3 styple provider wrapped with uPort functionality.
   *  For more details see uportSubprovider. uPort overrides eth_coinbase and eth_accounts
   *  to start a get address flow or to return an already received address. It also
   *  overrides eth_sendTransaction to start the send transaction flow to pass the
   *  transaction to the uPort app.
   *
   *  @example
   *  const uportProvider = connect.getProvider()
   *  const web3 = new Web3(uportProvider)
   *
   *  @param      {Object}           [provider]    An optional web3 style provider to wrap, default is a http provider, non standard provider may cause unexpected behavior, using default is suggested.
   *  @return     {UportSubprovider}               A web3 style provider wrapped with uPort functionality
   */


  (0, _createClass3.default)(Connect, [{
    key: 'getProvider',
    value: function getProvider(provider) {
      var _this2 = this;

      cov_1ytb5bt5lt.f[3]++;

      var subProvider = (cov_1ytb5bt5lt.s[33]++, new _UportSubprovider2.default({
        requestAddress: function requestAddress() {
          cov_1ytb5bt5lt.f[4]++;

          var requestID = (cov_1ytb5bt5lt.s[34]++, 'addressReqProvider');
          cov_1ytb5bt5lt.s[35]++;
          _this2.requestDisclosure({ accountType: (cov_1ytb5bt5lt.b[20][0]++, _this2.accountType) || (cov_1ytb5bt5lt.b[20][1]++, 'keypair') }, requestID);
          cov_1ytb5bt5lt.s[36]++;
          return _this2.onResponse(requestID).then(function (res) {
            cov_1ytb5bt5lt.f[5]++;
            cov_1ytb5bt5lt.s[37]++;
            return res.payload.address;
          });
        },
        sendTransaction: function sendTransaction(txObj) {
          cov_1ytb5bt5lt.f[6]++;
          cov_1ytb5bt5lt.s[38]++;

          delete txObj['from'];
          var requestID = (cov_1ytb5bt5lt.s[39]++, 'txReqProvider');
          cov_1ytb5bt5lt.s[40]++;
          _this2.sendTransaction(txObj, requestID);
          cov_1ytb5bt5lt.s[41]++;
          return _this2.onResponse(requestID).then(function (res) {
            cov_1ytb5bt5lt.f[7]++;
            cov_1ytb5bt5lt.s[42]++;
            return res.payload;
          });
        },
        signTypedData: function signTypedData(typedData) {
          cov_1ytb5bt5lt.f[8]++;

          var requestID = (cov_1ytb5bt5lt.s[43]++, 'typedDataSigReqProvider');
          cov_1ytb5bt5lt.s[44]++;
          _this2.requestTypedDataSignature(typedData, requestID);
          cov_1ytb5bt5lt.s[45]++;
          return _this2.onResponse(requestID).then(function (res) {
            cov_1ytb5bt5lt.f[9]++;
            cov_1ytb5bt5lt.s[46]++;
            return res.payload;
          });
        },
        personalSign: function personalSign(data) {
          cov_1ytb5bt5lt.f[10]++;

          var requestID = (cov_1ytb5bt5lt.s[47]++, 'personalSignReqProvider');
          cov_1ytb5bt5lt.s[48]++;
          _this2.requestPersonalSign(data, requestID);
          cov_1ytb5bt5lt.s[49]++;
          return _this2.onResponse(requestID).then(function (res) {
            cov_1ytb5bt5lt.f[11]++;
            cov_1ytb5bt5lt.s[50]++;
            return res.payload;
          });
        },
        provider: provider, network: this.network
      }));
      cov_1ytb5bt5lt.s[51]++;
      if (this.address) {
          cov_1ytb5bt5lt.b[21][0]++;
          cov_1ytb5bt5lt.s[52]++;
          subProvider.setAccount(this.address);
        } else {
        cov_1ytb5bt5lt.b[21][1]++;
      }cov_1ytb5bt5lt.s[53]++;
      return subProvider;
    }

    /**
     *  Get response by id of earlier request, returns promise which resolves when first
     *  reponse with given id is available. If looking for multiple responses of same id,
     *  listen instead by passing a callback.
     *
     *  @param    {String}       id          id of request you are waiting for a response for
     *  @param    {Function}     cb          an optional callback function, which is called each time a valid repsonse for a given id is available vs having a single promise returned
     *  @return   {Promise<Object, Error>}   promise resolves once valid response for given id is avaiable, otherwise rejects with error, no promised returned if callback given
     */

  }, {
    key: 'onResponse',
    value: function onResponse(id, cb) {
      var _this3 = this;

      cov_1ytb5bt5lt.f[12]++;
      cov_1ytb5bt5lt.s[54]++;

      var parseResponse = function parseResponse(res) {
        cov_1ytb5bt5lt.f[13]++;
        cov_1ytb5bt5lt.s[55]++;

        if (res.error) {
            cov_1ytb5bt5lt.b[22][0]++;
            cov_1ytb5bt5lt.s[56]++;
            return _promise2.default.reject((0, _assign2.default)({ id: id }, res));
          } else {
          cov_1ytb5bt5lt.b[22][1]++;
        }cov_1ytb5bt5lt.s[57]++;
        if (_uportTransports.message.util.isJWT(res.payload)) {
          cov_1ytb5bt5lt.b[23][0]++;

          var jwt = (cov_1ytb5bt5lt.s[58]++, res.payload);
          var decoded = (cov_1ytb5bt5lt.s[59]++, (0, _didJwt.decodeJWT)(jwt));
          cov_1ytb5bt5lt.s[60]++;
          if (decoded.payload.claim) {
            cov_1ytb5bt5lt.b[24][0]++;
            cov_1ytb5bt5lt.s[61]++;

            return _promise2.default.resolve((0, _assign2.default)({ id: id }, res));
          } else {
            cov_1ytb5bt5lt.b[24][1]++;
          }
          cov_1ytb5bt5lt.s[62]++;
          return _this3.verifyResponse(jwt).then(function (parsedRes) {
            cov_1ytb5bt5lt.f[14]++;
            cov_1ytb5bt5lt.s[63]++;

            // Set identifiers present in the response
            // TODO maybe just change name in uport-js
            if (parsedRes.boxPub) {
                cov_1ytb5bt5lt.b[25][0]++;
                cov_1ytb5bt5lt.s[64]++;
                parsedRes.publicEncKey = parsedRes.boxPub;
              } else {
              cov_1ytb5bt5lt.b[25][1]++;
            }cov_1ytb5bt5lt.s[65]++;
            _this3.setState(parsedRes);
            cov_1ytb5bt5lt.s[66]++;
            return { id: id, payload: parsedRes, data: res.data };
          });
        } else {
          cov_1ytb5bt5lt.b[23][1]++;
          cov_1ytb5bt5lt.s[67]++;

          return _promise2.default.resolve((0, _assign2.default)({ id: id }, res));
        }
      };

      cov_1ytb5bt5lt.s[68]++;
      if ((cov_1ytb5bt5lt.b[27][0]++, this.onloadResponse) && (cov_1ytb5bt5lt.b[27][1]++, this.onloadResponse.id === id)) {
        cov_1ytb5bt5lt.b[26][0]++;

        var onloadResponse = (cov_1ytb5bt5lt.s[69]++, this.onloadResponse);
        cov_1ytb5bt5lt.s[70]++;
        this.onloadResponse = null;
        cov_1ytb5bt5lt.s[71]++;
        return parseResponse(onloadResponse);
      } else {
        cov_1ytb5bt5lt.b[26][1]++;
      }

      cov_1ytb5bt5lt.s[72]++;
      if (cb) {
        cov_1ytb5bt5lt.b[28][0]++;
        cov_1ytb5bt5lt.s[73]++;

        this.PubSub.subscribe(id, function (msg, res) {
          cov_1ytb5bt5lt.f[15]++;
          cov_1ytb5bt5lt.s[74]++;

          parseResponse(res).then(function (res) {
            cov_1ytb5bt5lt.f[16]++;
            cov_1ytb5bt5lt.s[75]++;
            cb(null, res);
          }, function (err) {
            cov_1ytb5bt5lt.f[17]++;
            cov_1ytb5bt5lt.s[76]++;
            cb(err, null);
          });
        });
      } else {
        cov_1ytb5bt5lt.b[28][1]++;
        cov_1ytb5bt5lt.s[77]++;

        return new _promise2.default(function (resolve, reject) {
          cov_1ytb5bt5lt.f[18]++;
          cov_1ytb5bt5lt.s[78]++;

          _this3.PubSub.subscribe(id, function (msg, res) {
            cov_1ytb5bt5lt.f[19]++;
            cov_1ytb5bt5lt.s[79]++;

            _this3.PubSub.unsubscribe(id);
            cov_1ytb5bt5lt.s[80]++;
            parseResponse(res).then(resolve, reject);
          });
        });
      }
    }

    /**
     * Push a response payload to uPort connect to be handled. Useful if implementing your own transports
     * and you are getting responses with your own functions, listeners, event handlers etc. It will
     * parse the response and resolve it to any listening onResponse functions with the matching id. A
     * response object in connect is of the form {id, payload, data}, where payload and id required. Payload is the
     * response payload (url or JWT) from a uPort client.
     *
     * @param {Object} response  a wrapped response payload, of form {id, res, data}, res and id required
     */

  }, {
    key: 'pubResponse',
    value: function pubResponse(response) {
      cov_1ytb5bt5lt.f[20]++;
      cov_1ytb5bt5lt.s[81]++;

      if ((cov_1ytb5bt5lt.b[30][0]++, !response) || (cov_1ytb5bt5lt.b[30][1]++, !response.id)) {
          cov_1ytb5bt5lt.b[29][0]++;
          cov_1ytb5bt5lt.s[82]++;
          throw new Error('Response payload requires an id');
        } else {
        cov_1ytb5bt5lt.b[29][1]++;
      }cov_1ytb5bt5lt.s[83]++;
      this.PubSub.publish(response.id, { payload: response.payload, data: response.data });
    }

    /**
     * @private
     * Verify a jwt and save the resulting doc to this instance, then process the
     * disclosure payload with this.credentials
     * @param {JWT} token   the JWT to be verified
     */

  }, {
    key: 'verifyResponse',
    value: function verifyResponse(token) {
      var _this4 = this;

      cov_1ytb5bt5lt.f[21]++;
      cov_1ytb5bt5lt.s[84]++;

      return (0, _didJwt.verifyJWT)(token, { audience: this.credentials.did }).then(function (res) {
        cov_1ytb5bt5lt.f[22]++;
        cov_1ytb5bt5lt.s[85]++;

        _this4.doc = res.doc;
        cov_1ytb5bt5lt.s[86]++;
        return _this4.credentials.processDisclosurePayload(res);
      });
    }

    /**
     *  Send a request message to a uPort client. Useful function if you want to pass additional transport options and/or send a request you already created elsewhere.
     *
     *  @param    {String}     request           a request message to send to a uPort client
     *  @param    {String}     id                id of the request, which you will later use to handle the response
     *  @param    {Object}     [opts]            optional parameters for a callback, see (specs for more details)[https://github.com/uport-project/specs/blob/develop/messages/index.md]
     *  @param    {String}     opts.redirectUrl  If on mobile client, the url you want the uPort client to return control to once it completes it's flow. Depending on the params below, this redirect can include the response or it may be returned to the callback in the request token.
     *  @param    {String}     opts.data         A string of any data you want later returned with the response. It may be contextual to the original request. (i.e. a request id from your server)
     *  @param    {String}     opts.type         Type specifies the callback action. 'post' to send response to callback in request token or 'redirect' to send response in redirect url.
     *  @param    {Function}   opts.cancel       When using the default QR send, but handling the response yourself, this function will be called when a user closes the request modal.
     */

  }, {
    key: 'send',
    value: function send(request, id) {
      var _this5 = this;

      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (cov_1ytb5bt5lt.b[31][0]++, {}),
          redirectUrl = _ref.redirectUrl,
          data = _ref.data,
          type = _ref.type,
          cancel = _ref.cancel;

      cov_1ytb5bt5lt.f[23]++;
      cov_1ytb5bt5lt.s[87]++;

      if (!id) {
          cov_1ytb5bt5lt.b[32][0]++;
          cov_1ytb5bt5lt.s[88]++;
          throw new Error('Requires request id');
        } else {
        cov_1ytb5bt5lt.b[32][1]++;
      }cov_1ytb5bt5lt.s[89]++;
      if (this.isOnMobile) {
        cov_1ytb5bt5lt.b[33][0]++;
        cov_1ytb5bt5lt.s[90]++;

        if (!redirectUrl & !type) {
            cov_1ytb5bt5lt.b[34][0]++;
            cov_1ytb5bt5lt.s[91]++;
            type = 'redirect';
          } else {
          cov_1ytb5bt5lt.b[34][1]++;
        }cov_1ytb5bt5lt.s[92]++;
        this.mobileTransport(request, { id: id, data: data, redirectUrl: redirectUrl, type: type });
      } else {
          cov_1ytb5bt5lt.b[33][1]++;
          cov_1ytb5bt5lt.s[93]++;
          if ((cov_1ytb5bt5lt.b[36][0]++, this.usePush) && (cov_1ytb5bt5lt.b[36][1]++, this.pushTransport)) {
            cov_1ytb5bt5lt.b[35][0]++;
            cov_1ytb5bt5lt.s[94]++;

            this.pushTransport(request, { data: data }).then(function (res) {
              cov_1ytb5bt5lt.f[24]++;
              cov_1ytb5bt5lt.s[95]++;
              return _this5.PubSub.publish(id, res);
            });
          } else {
            cov_1ytb5bt5lt.b[35][1]++;
            cov_1ytb5bt5lt.s[96]++;

            this.transport(request, { data: data, cancel: cancel }).then(function (res) {
              cov_1ytb5bt5lt.f[25]++;
              cov_1ytb5bt5lt.s[97]++;
              return _this5.PubSub.publish(id, res);
            });
          }
        }
    }

    /**
     *  Builds and returns a contract object which can be used to interact with
     *  a given contract. Similar to web3.eth.contract. Once specifying .at(address)
     *  you can call the contract functions with this object. It will create a transaction
     *  sign request and send it. Functionality limited to function calls which require sending
     *  a transaction, as these are the only calls which require interaction with a uPort client.
     *  For reading and/or events use web3 alongside or a similar library.
     *
     * @example
     * const abi = [{"constant":false,"inputs":[{"name":"status","type":"string"}],"name":"updateStatus","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"getStatus","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"}]
     * const StatusContract = connect.contract(abi).at('0x70A804cCE17149deB6030039798701a38667ca3B')
     * const reqId = 'updateStatus'
     * StatusContract.updateStatus('helloStatus', reqId)
     *  connect.onResponse('reqId').then(res => {
     *    const txHash = res.payload
     *  })
     *
     *  @param    {Object}       abi      contract ABI
     *  @return   {Object}                contract object
     */

  }, {
    key: 'contract',
    value: function contract(abi) {
      var _this6 = this;

      cov_1ytb5bt5lt.f[26]++;
      cov_1ytb5bt5lt.s[98]++;

      var txObjHandler = function txObjHandler(txObj, id, sendOpts) {
        cov_1ytb5bt5lt.f[27]++;
        cov_1ytb5bt5lt.s[99]++;

        txObj.fn = txObj.function;
        cov_1ytb5bt5lt.s[100]++;
        delete txObj['function'];
        cov_1ytb5bt5lt.s[101]++;
        return _this6.sendTransaction(txObj, id, sendOpts);
      };
      cov_1ytb5bt5lt.s[102]++;
      return (0, _uportCredentials.ContractFactory)(txObjHandler.bind(this))(abi);
    }

    /**
     *  Given a transaction object (similarly defined as the web3 transaction object)
     *  it creates a transaction request and sends it. A transaction hash is later
     *  returned as the response if the user selected to sign it.
     *
     *  @example
     *  const txobject = {
     *    to: '0xc3245e75d3ecd1e81a9bfb6558b6dafe71e9f347',
     *    value: '0.1',
     *    fn: "setStatus(string 'hello', bytes32 '0xc3245e75d3ecd1e81a9bfb6558b6dafe71e9f347')",
     *    appName: 'MyDapp'
     *  }
     *  connect.sendTransaction(txobject, 'setStatus')
     *  connect.onResponse('setStatus').then(res => {
     *    const txHash = res.payload
     *  })
     *
     *  @param    {Object}    txObj
     *  @param    {String}    [id='txReq']    string to identify request, later used to get response, name of function call is used by default, if not a function call, the default is 'txReq'
     *  @param    {Object}    [sendOpts]      reference send function options
     */

  }, {
    key: 'sendTransaction',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var txObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_1ytb5bt5lt.b[37][0]++, {});

        var _this7 = this;

        var id = arguments[1];
        var sendOpts = arguments[2];
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                cov_1ytb5bt5lt.f[28]++;
                cov_1ytb5bt5lt.s[103]++;

                if (txObj.vc) {
                  _context.next = 9;
                  break;
                }

                cov_1ytb5bt5lt.b[38][0]++;
                cov_1ytb5bt5lt.s[104]++;
                _context.next = 7;
                return this.signAndUploadProfile();

              case 7:
                _context.next = 10;
                break;

              case 9:
                cov_1ytb5bt5lt.b[38][1]++;

              case 10:
                cov_1ytb5bt5lt.s[105]++;

                txObj = (0, _extends3.default)({
                  vc: this.vc }, txObj, {
                  to: (0, _mnid.isMNID)(txObj.to) ? (cov_1ytb5bt5lt.b[39][0]++, txObj.to) : (cov_1ytb5bt5lt.b[39][1]++, (0, _mnid.encode)({ network: this.network.id, address: txObj.to })),
                  rpcUrl: this.network.rpcUrl

                  //  Create default id, where id is function name, or txReq if no function name
                });cov_1ytb5bt5lt.s[106]++;
                if (!id) {
                    cov_1ytb5bt5lt.b[40][0]++;
                    cov_1ytb5bt5lt.s[107]++;
                    id = txObj.fn ? (cov_1ytb5bt5lt.b[41][0]++, txObj.fn.split('(')[0]) : (cov_1ytb5bt5lt.b[41][1]++, 'txReq');
                  } else {
                  cov_1ytb5bt5lt.b[40][1]++;
                }cov_1ytb5bt5lt.s[108]++;
                this.credentials.createTxRequest(txObj, { callbackUrl: this.genCallback(id) }).then(function (jwt) {
                  cov_1ytb5bt5lt.f[29]++;
                  cov_1ytb5bt5lt.s[109]++;
                  return _this7.send(jwt, id, sendOpts);
                });

              case 16:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function sendTransaction() {
        return _ref2.apply(this, arguments);
      }

      return sendTransaction;
    }()

    /**
     *  Creates and sends a request for a user to [sign a verification](https://github.com/uport-project/specs/blob/develop/messages/verificationreq.md) and sends the request to the uPort user.
     *
     *  @example
     *  const unsignedClaim = {
     *    claim: {
     *      "Citizen of city X": {
     *        "Allowed to vote": true,
     *        "Document": "QmZZBBKPS2NWc6PMZbUk9zUHCo1SHKzQPPX4ndfwaYzmPW"
     *      }
     *    },
     *    sub: "did:ethr:0x413daa771a2fc9c5ae5a66abd144881ef2498c54"
     *  }
     *  connect.requestVerificationSignature(unsignedClaim).then(jwt => {
     *    ...
     *  })
     *
     *  @param    {Object}     unsignedClaim          unsigned claim object which you want the user to attest
     *  @param    {String}     sub                    the DID which the unsigned claim is about
     *  @param    {String}     [id='signVerReq']      string to identify request, later used to get response
     *  @param    {Object}     [sendOpts]             reference send function options
     */

  }, {
    key: 'requestVerificationSignature',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(unsignedClaim, opts) {
        var _this8 = this;

        var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (cov_1ytb5bt5lt.b[42][0]++, 'verSigReq');
        var sendOpts = arguments[3];
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                cov_1ytb5bt5lt.f[30]++;
                cov_1ytb5bt5lt.s[110]++;
                _context2.next = 4;
                return this.signAndUploadProfile();

              case 4:
                cov_1ytb5bt5lt.s[111]++;

                if (!(typeof opts === 'string')) {
                  _context2.next = 13;
                  break;
                }

                cov_1ytb5bt5lt.b[43][0]++;
                cov_1ytb5bt5lt.s[112]++;

                console.warn('The subject argument is deprecated, use option object with {sub: sub, ...}');
                cov_1ytb5bt5lt.s[113]++;
                opts = { sub: opts };
                _context2.next = 22;
                break;

              case 13:
                cov_1ytb5bt5lt.b[43][1]++;
                cov_1ytb5bt5lt.s[114]++;

                if (!((cov_1ytb5bt5lt.b[45][0]++, !opts) || (cov_1ytb5bt5lt.b[45][1]++, !opts.sub))) {
                  _context2.next = 21;
                  break;
                }

                cov_1ytb5bt5lt.b[44][0]++;
                cov_1ytb5bt5lt.s[115]++;
                throw new Error('Missing required field sub in opts.  Received: ' + opts);

              case 21:
                cov_1ytb5bt5lt.b[44][1]++;

              case 22:
                cov_1ytb5bt5lt.s[116]++;


                this.credentials.createVerificationSignatureRequest(unsignedClaim, (0, _extends3.default)({}, opts, { aud: this.did, callbackUrl: this.genCallback(id), vc: this.vc })).then(function (jwt) {
                  cov_1ytb5bt5lt.f[31]++;
                  cov_1ytb5bt5lt.s[117]++;
                  return _this8.send(jwt, id, sendOpts);
                });

              case 24:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function requestVerificationSignature(_x5, _x6) {
        return _ref3.apply(this, arguments);
      }

      return requestVerificationSignature;
    }()

    /**
     * Creates and sends a request to a user to sign a piece of ERC712 Typed Data
     * 
     * @param     {Object}    typedData               an object containing unsigned typed, structured data that follows the ERC712 specification  
     * @param     {String}    [id='typedDataSigReq']  string to identify request, later used to get response
     * @param     {Object}    [sendOpts]              reference send function options
     */

  }, {
    key: 'requestTypedDataSignature',
    value: function requestTypedDataSignature(typedData) {
      var _this9 = this;

      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_1ytb5bt5lt.b[46][0]++, 'typedDataSigReq');
      var sendOpts = arguments[2];
      cov_1ytb5bt5lt.f[32]++;

      var opts = (cov_1ytb5bt5lt.s[118]++, {
        callback: this.genCallback(id),
        net: this.network.id
      });
      cov_1ytb5bt5lt.s[119]++;
      if (this.address) {
          cov_1ytb5bt5lt.b[47][0]++;
          cov_1ytb5bt5lt.s[120]++;
          opts.from = this.address;
        } else {
        cov_1ytb5bt5lt.b[47][1]++;
      }cov_1ytb5bt5lt.s[121]++;
      this.credentials.createTypedDataSignatureRequest(typedData, opts).then(function (jwt) {
        cov_1ytb5bt5lt.f[33]++;
        cov_1ytb5bt5lt.s[122]++;
        return _this9.send(jwt, id, sendOpts);
      });
    }

    /**
     * Creates and sends a request to a user to sign an arbitrary data string
     * 
     * @param {String} data                   a string representing a piece of arbitrary data
     * @param {String} [id='personalSignReq'] 
     * @param {Object} [sendOpts]
     */

  }, {
    key: 'requestPersonalSign',
    value: function requestPersonalSign(data) {
      var _this10 = this;

      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_1ytb5bt5lt.b[48][0]++, 'personalSignReq');
      var sendOpts = arguments[2];
      cov_1ytb5bt5lt.f[34]++;

      var opts = (cov_1ytb5bt5lt.s[123]++, {
        callback: this.genCallback(id),
        net: this.network.id
      });
      cov_1ytb5bt5lt.s[124]++;
      if (this.address) {
          cov_1ytb5bt5lt.b[49][0]++;
          cov_1ytb5bt5lt.s[125]++;
          opts.from = this.address;
        } else {
        cov_1ytb5bt5lt.b[49][1]++;
      }cov_1ytb5bt5lt.s[126]++;
      this.credentials.createPersonalSignRequest(data, opts).then(function (jwt) {
        cov_1ytb5bt5lt.f[35]++;
        cov_1ytb5bt5lt.s[127]++;
        return _this10.send(jwt, id, sendOpts);
      });
    }

    /**
     *  Creates a [Selective Disclosure Request JWT](https://github.com/uport-project/specs/blob/develop/messages/sharereq.md) and sends request message to uPort client.
     *
     *  @example
     *  const req = { requested: ['name', 'country'],
     *                callbackUrl: 'https://myserver.com',
     *                notifications: true }
     *  const reqID = 'disclosureReq'
     *  connect.requestDisclosure(req, reqID)
     *  connect.onResponse(reqID).then(jwt => {
     *      ...
     *  })
     *
     *  @param    {Object}     [reqObj={}]           request params object
     *  @param    {Array}      reqObj.requested      an array of attributes for which you are requesting credentials to be shared for
     *  @param    {Array}      reqObj.verified       an array of attributes for which you are requesting verified credentials to be shared for
     *  @param    {Boolean}    reqObj.notifications  boolean if you want to request the ability to send push notifications
     *  @param    {String}     reqObj.callbackUrl    the url which you want to receive the response of this request
     *  @param    {String}     reqObj.networkId      Override default network id of Ethereum chain of identity eg. 0x4 for rinkeby
     *  @param    {String}     reqObj.rpcUrl         Override default JSON RPC url for networkId. This is generally only required for use with private chains.
     *  @param    {String}     reqObj.accountType    Ethereum account type: "general", "keypair", or "none"
     *  @param    {Number}     reqObj.expiresIn      Seconds until expiry
     *  @param    {String}     [id='disclosureReq']  string to identify request, later used to get response
     *  @param    {Object}     [sendOpts]            reference send function options
     */

  }, {
    key: 'requestDisclosure',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        var reqObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_1ytb5bt5lt.b[50][0]++, {});

        var _this11 = this;

        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_1ytb5bt5lt.b[51][0]++, 'disclosureReq');
        var sendOpts = arguments[2];
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                cov_1ytb5bt5lt.f[36]++;
                cov_1ytb5bt5lt.s[128]++;

                if (reqObj.vc) {
                  _context3.next = 9;
                  break;
                }

                cov_1ytb5bt5lt.b[52][0]++;
                cov_1ytb5bt5lt.s[129]++;
                _context3.next = 7;
                return this.signAndUploadProfile();

              case 7:
                _context3.next = 10;
                break;

              case 9:
                cov_1ytb5bt5lt.b[52][1]++;

              case 10:
                cov_1ytb5bt5lt.s[130]++;

                // Augment request object with verified claims, accountType, and a callback url
                reqObj = (0, _assign2.default)({
                  vc: this.vc,
                  accountType: (cov_1ytb5bt5lt.b[53][0]++, this.accountType) || (cov_1ytb5bt5lt.b[53][1]++, 'none'),
                  callbackUrl: this.genCallback(id)
                }, reqObj);

                cov_1ytb5bt5lt.s[131]++;
                if (reqObj.accountType != 'none') {
                  cov_1ytb5bt5lt.b[54][0]++;
                  cov_1ytb5bt5lt.s[132]++;

                  reqObj.networkId = this.network.id;
                  cov_1ytb5bt5lt.s[133]++;
                  reqObj.rpcUrl = this.network.rpcUrl;
                } else {
                  cov_1ytb5bt5lt.b[54][1]++;
                }

                // Create and send request
                cov_1ytb5bt5lt.s[134]++;
                this.credentials.createDisclosureRequest(reqObj, reqObj.expiresIn).then(function (jwt) {
                  cov_1ytb5bt5lt.f[37]++;
                  cov_1ytb5bt5lt.s[135]++;
                  return _this11.send(jwt, id, sendOpts);
                });

              case 16:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function requestDisclosure() {
        return _ref4.apply(this, arguments);
      }

      return requestDisclosure;
    }()

    /**
     *  Create and send a verification (credential) about connnected user. Verification is signed by
     *  temporary session keys created by Connect. If you want to create a verification with a different
     *  keypair/did use uPort credentials and send it with the Connect send function.
     *
     *  @example
     *  connect.sendVerification({
     *   exp: <future timestamp>,
     *   claim: { name: 'John Smith' }
     *  }, 'REQUEST_ID')
     *  connect.onResponse('REQUEST_ID').then(credential => {
     *   ...
     *  })
     *
     * @param    {Object}     [verification]        a unsigned verification object, by default the sub is the connected user
     * @param    {Object}     verification.claim    a claim about the subject, single key value or key mapping to object with multiple values (ie { address: {street: ..., zip: ..., country: ...}})
     * @param    {String}     verification.exp      time at which this verification expires and is no longer valid (seconds since epoch)
     * @param    {String}     [id='sendVerReq']     string to identify request, later used to get response
     * @param    {Object}     [sendOpts]            reference send function options
     */

  }, {
    key: 'sendVerification',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        var verification = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_1ytb5bt5lt.b[55][0]++, {});

        var _this12 = this;

        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_1ytb5bt5lt.b[56][0]++, 'sendVerReq');
        var sendOpts = arguments[2];
        var cb;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                cov_1ytb5bt5lt.f[38]++;
                cov_1ytb5bt5lt.s[136]++;

                if (verification.vc) {
                  _context4.next = 9;
                  break;
                }

                cov_1ytb5bt5lt.b[57][0]++;
                cov_1ytb5bt5lt.s[137]++;
                _context4.next = 7;
                return this.signAndUploadProfile();

              case 7:
                _context4.next = 10;
                break;

              case 9:
                cov_1ytb5bt5lt.b[57][1]++;

              case 10:
                // Callback and message form differ for this req, may be reconciled in the future
                cb = (cov_1ytb5bt5lt.s[138]++, this.genCallback(id));
                cov_1ytb5bt5lt.s[139]++;

                verification = (0, _extends3.default)({ sub: this.did, vc: this.vc }, verification);
                cov_1ytb5bt5lt.s[140]++;
                this.credentials.createVerification(verification).then(function (jwt) {
                  cov_1ytb5bt5lt.f[39]++;

                  var uri = (cov_1ytb5bt5lt.s[141]++, _uportTransports.message.util.paramsToQueryString(_uportTransports.message.util.messageToURI(jwt), { 'callback_url': cb }));
                  cov_1ytb5bt5lt.s[142]++;
                  _this12.send(uri, id, sendOpts);
                });

              case 15:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function sendVerification() {
        return _ref5.apply(this, arguments);
      }

      return sendVerification;
    }()

    /**
     * Update the internal state of the connect instance and ensure that it is consistent
     * with the state saved to localStorage.  You can pass in an object containing key-value pairs to update,
     * or a function that returns updated key-value pairs as a function of the current state.
     *
     * @param {Function|Object} Update -- An object, or function specifying updates to the current Connect state (as a function of the current state)
     */

  }, {
    key: 'setState',
    value: function setState(update) {
      cov_1ytb5bt5lt.f[40]++;
      cov_1ytb5bt5lt.s[143]++;

      switch (typeof update === 'undefined' ? 'undefined' : (0, _typeof3.default)(update)) {
        case 'object':
          cov_1ytb5bt5lt.b[58][0]++;
          cov_1ytb5bt5lt.s[144]++;

          this._state = (0, _extends3.default)({}, this._state, update);
          cov_1ytb5bt5lt.s[145]++;
          break;
        case 'function':
          cov_1ytb5bt5lt.b[58][1]++;
          cov_1ytb5bt5lt.s[146]++;

          this._state = update(this._state);
          cov_1ytb5bt5lt.s[147]++;
          break;
        case 'undefined':
          cov_1ytb5bt5lt.b[58][2]++;
          cov_1ytb5bt5lt.s[148]++;

          break;
        default:
          cov_1ytb5bt5lt.b[58][3]++;
          cov_1ytb5bt5lt.s[149]++;

          throw new Error('Cannot update state with ' + update);
      }
      // Normalize address to mnid

      var _ref6 = (cov_1ytb5bt5lt.s[150]++, this._state),
          mnid = _ref6.mnid;

      cov_1ytb5bt5lt.s[151]++;

      if ((0, _mnid.isMNID)(mnid)) {
        cov_1ytb5bt5lt.b[59][0]++;
        cov_1ytb5bt5lt.s[152]++;

        this._state.address = (0, _mnid.decode)(mnid).address;
      } else {
          cov_1ytb5bt5lt.b[59][1]++;
          cov_1ytb5bt5lt.s[153]++;
          if (mnid) {
            cov_1ytb5bt5lt.b[60][0]++;
            cov_1ytb5bt5lt.s[154]++;

            // Don't allow setting an invalid mnid
            throw new Error('Invalid MNID: ' + this._state.mnid);
          } else {
            cov_1ytb5bt5lt.b[60][1]++;
          }
        }cov_1ytb5bt5lt.s[155]++;
      if ((cov_1ytb5bt5lt.b[62][0]++, this.publicEncKey) && (cov_1ytb5bt5lt.b[62][1]++, this.pushToken)) {
        cov_1ytb5bt5lt.b[61][0]++;
        cov_1ytb5bt5lt.s[156]++;

        this.pushTransport = pushTransport(this.pushToken, this.publicEncKey);
      } else {
        cov_1ytb5bt5lt.b[61][1]++;
      }

      // Write to localStorage
      cov_1ytb5bt5lt.s[157]++;
      if (this.useStore) {
          cov_1ytb5bt5lt.b[63][0]++;
          cov_1ytb5bt5lt.s[158]++;
          this.store.set(this._state);
        } else {
        cov_1ytb5bt5lt.b[63][1]++;
      }
    }

    /**
     * Load state from local storage and set this instance's state accordingly.
     */

  }, {
    key: 'loadState',
    value: function loadState() {
      var _this13 = this;

      cov_1ytb5bt5lt.f[41]++;
      cov_1ytb5bt5lt.s[159]++;

      // replace state
      if (this.useStore) {
          cov_1ytb5bt5lt.b[64][0]++;
          cov_1ytb5bt5lt.s[160]++;
          this.setState(function (state) {
            cov_1ytb5bt5lt.f[42]++;
            cov_1ytb5bt5lt.s[161]++;
            return _this13.store.get();
          });
        } else {
        cov_1ytb5bt5lt.b[64][1]++;
      }
    }

    /**
     * Clear any user-specific state from the browser, (both the Connect instance and localStorage)
     * effectively logging them out. The keypair (app-instance identity) is preserved
     */

  }, {
    key: 'logout',
    value: function logout() {
      cov_1ytb5bt5lt.f[43]++;
      cov_1ytb5bt5lt.s[162]++;

      // Clear explicit state
      this.setState(function (state) {
        cov_1ytb5bt5lt.f[44]++;
        cov_1ytb5bt5lt.s[163]++;
        return { keypair: state.keypair };
      });
      // Clear all instance variables with references to current state
      cov_1ytb5bt5lt.s[164]++;
      this.pushTransport = null;
    }

    /**
     * Clear the entire state of the connect instance, including the keypair, from memory
     * and localStorage.  Rebuild this.credentials with a new app-instance identity
     */

  }, {
    key: 'reset',
    value: function reset() {
      cov_1ytb5bt5lt.f[45]++;
      cov_1ytb5bt5lt.s[165]++;

      this.logout();
      // Rebuild credentials
      cov_1ytb5bt5lt.s[166]++;
      this.keypair = _uportCredentials.Credentials.createIdentity();
      cov_1ytb5bt5lt.s[167]++;
      this.credentials = new _uportCredentials.Credentials((0, _extends3.default)({}, this.keypair, this.resolverConfigs));
    }

    /**
     * Accessor methods for Connect state.  The state consists of the key-value pairs below
     *  (did, doc, mnid, address, keypair, pushToken, and publicEncKey)
     * @private
     */

  }, {
    key: 'genCallback',


    /**
     *  @private
     */
    value: function genCallback(reqId) {
      cov_1ytb5bt5lt.f[64]++;
      cov_1ytb5bt5lt.s[190]++;

      return this.isOnMobile ? (cov_1ytb5bt5lt.b[67][0]++, windowCallback(reqId)) : (cov_1ytb5bt5lt.b[67][1]++, _uportTransports.transport.messageServer.genCallback());
    }

    /**
     * @private
     * Sign a profile object with this.credentials, and upload it to ipfs, prepending
     * the instance array of verified claims (this.vc) with the ipfs uri.  If a profile
     * object is not provided, create one on the fly 
     * @param {Object}  [profile]         the profile object to be signed and uploaded
     * @returns {Promise<String, Error>}  a promise resolving to the ipfs hash, or rejecting with an error
     */

  }, {
    key: 'signAndUploadProfile',
    value: function signAndUploadProfile(profile) {
      var _this14 = this;

      cov_1ytb5bt5lt.f[65]++;
      cov_1ytb5bt5lt.s[191]++;

      if ((cov_1ytb5bt5lt.b[69][0]++, !profile) && (cov_1ytb5bt5lt.b[69][1]++, this.vc.length > 0)) {
          cov_1ytb5bt5lt.b[68][0]++;
          cov_1ytb5bt5lt.s[192]++;
          return;
        } else {
        cov_1ytb5bt5lt.b[68][1]++;
      }cov_1ytb5bt5lt.s[193]++;
      profile = (cov_1ytb5bt5lt.b[70][0]++, profile) || (cov_1ytb5bt5lt.b[70][1]++, {
        name: this.appName,
        description: this.description,
        url: typeof window !== 'undefined' ? (cov_1ytb5bt5lt.b[71][0]++, window.location.protocol + '//' + window.location.host) : (cov_1ytb5bt5lt.b[71][1]++, undefined),
        profileImage: this.profileImage,
        bannerImage: this.bannerImage

        // Upload to ipfs
      });cov_1ytb5bt5lt.s[194]++;
      return this.credentials.createVerification({ sub: this.keypair.did, claim: profile }).then(function (jwt) {
        cov_1ytb5bt5lt.f[66]++;
        cov_1ytb5bt5lt.s[195]++;
        return (0, _util.ipfsAdd)(jwt);
      }).then(function (hash) {
        cov_1ytb5bt5lt.f[67]++;
        cov_1ytb5bt5lt.s[196]++;

        console.log('uploaded, ', _this14.vc);
        cov_1ytb5bt5lt.s[197]++;
        _this14.vc.unshift('/ipfs/' + hash);
        cov_1ytb5bt5lt.s[198]++;
        return hash;
      });
    }
  }, {
    key: 'state',
    get: function get() {
      cov_1ytb5bt5lt.f[46]++;
      cov_1ytb5bt5lt.s[168]++;
      return this._state;
    },


    /**
     * Setter methods with appropriate validation
     * @private
     */

    set: function set(state) {
      cov_1ytb5bt5lt.f[55]++;
      cov_1ytb5bt5lt.s[177]++;
      throw new Error('Use setState to set state object');
    }
  }, {
    key: 'did',
    get: function get() {
      cov_1ytb5bt5lt.f[47]++;
      cov_1ytb5bt5lt.s[169]++;
      return this._state.did;
    },
    set: function set(did) {
      cov_1ytb5bt5lt.f[56]++;
      cov_1ytb5bt5lt.s[178]++;
      this.setState({ did: did });
    }
  }, {
    key: 'doc',
    get: function get() {
      cov_1ytb5bt5lt.f[48]++;
      cov_1ytb5bt5lt.s[170]++;
      return (0, _extends3.default)({}, this._state.doc);
    },
    set: function set(doc) {
      cov_1ytb5bt5lt.f[57]++;
      cov_1ytb5bt5lt.s[179]++;
      this.setState({ doc: doc });
    }
  }, {
    key: 'mnid',
    get: function get() {
      cov_1ytb5bt5lt.f[49]++;
      cov_1ytb5bt5lt.s[171]++;
      return this._state.mnid;
    },
    set: function set(mnid) {
      cov_1ytb5bt5lt.f[58]++;
      cov_1ytb5bt5lt.s[180]++;
      this.setState({ mnid: mnid });
    }
  }, {
    key: 'address',
    get: function get() {
      cov_1ytb5bt5lt.f[50]++;
      cov_1ytb5bt5lt.s[172]++;
      return this._state.address;
    },


    // Address field alone is deprectated.  Allow setting an mnid, but not an unqualified address
    set: function set(address) {
      cov_1ytb5bt5lt.f[63]++;
      cov_1ytb5bt5lt.s[185]++;

      if ((0, _mnid.isMNID)(address)) {
        cov_1ytb5bt5lt.b[65][0]++;
        cov_1ytb5bt5lt.s[186]++;

        this.setState({ mnid: address });
      } else {
        cov_1ytb5bt5lt.b[65][1]++;
        cov_1ytb5bt5lt.s[187]++;

        if (address === this.address) {
            cov_1ytb5bt5lt.b[66][0]++;
            cov_1ytb5bt5lt.s[188]++;
            return;
          } else {
          cov_1ytb5bt5lt.b[66][1]++;
        }cov_1ytb5bt5lt.s[189]++;
        throw new Error('Setting an Ethereum address without a network id is not supported.  Use an MNID instead.');
      }
    }
  }, {
    key: 'keypair',
    get: function get() {
      cov_1ytb5bt5lt.f[51]++;
      cov_1ytb5bt5lt.s[173]++;
      return (0, _extends3.default)({}, this._state.keypair);
    },
    set: function set(keypair) {
      cov_1ytb5bt5lt.f[59]++;
      cov_1ytb5bt5lt.s[181]++;
      this.setState({ keypair: keypair });
    }
  }, {
    key: 'verified',
    get: function get() {
      cov_1ytb5bt5lt.f[52]++;
      cov_1ytb5bt5lt.s[174]++;
      return this._state.verified;
    },
    set: function set(verified) {
      cov_1ytb5bt5lt.f[60]++;
      cov_1ytb5bt5lt.s[182]++;
      this.setState({ verified: verified });
    }
  }, {
    key: 'pushToken',
    get: function get() {
      cov_1ytb5bt5lt.f[53]++;
      cov_1ytb5bt5lt.s[175]++;
      return this._state.pushToken;
    },
    set: function set(pushToken) {
      cov_1ytb5bt5lt.f[61]++;
      cov_1ytb5bt5lt.s[183]++;
      this.setState({ pushToken: pushToken });
    }
  }, {
    key: 'publicEncKey',
    get: function get() {
      cov_1ytb5bt5lt.f[54]++;
      cov_1ytb5bt5lt.s[176]++;
      return this._state.publicEncKey;
    },
    set: function set(publicEncKey) {
      cov_1ytb5bt5lt.f[62]++;
      cov_1ytb5bt5lt.s[184]++;
      this.setState({ publicEncKey: publicEncKey });
    }
  }]);
  return Connect;
}();

var LOCALSTOREKEY = (cov_1ytb5bt5lt.s[199]++, 'connectState');

var LocalStorageStore = function () {
  function LocalStorageStore() {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_1ytb5bt5lt.b[72][0]++, LOCALSTOREKEY);
    (0, _classCallCheck3.default)(this, LocalStorageStore);
    cov_1ytb5bt5lt.f[68]++;
    cov_1ytb5bt5lt.s[200]++;

    this.key = key;
  }

  (0, _createClass3.default)(LocalStorageStore, [{
    key: 'get',
    value: function get() {
      cov_1ytb5bt5lt.f[69]++;
      cov_1ytb5bt5lt.s[201]++;

      return JSON.parse((cov_1ytb5bt5lt.b[73][0]++, _store2.default.get(this.key)) || (cov_1ytb5bt5lt.b[73][1]++, '{}'));
    }
  }, {
    key: 'set',
    value: function set(stateObj) {
      cov_1ytb5bt5lt.f[70]++;
      cov_1ytb5bt5lt.s[202]++;

      _store2.default.set(this.key, (0, _stringify2.default)(stateObj));
    }
  }]);
  return LocalStorageStore;
}();

/**
 *  A transport created for uPort connect. Bundles transport functionality from uport-transports. This implements the
 *  default QR modal flow on desktop clients. If given a request which uses the messaging server Chasqui to relay
 *  responses, it will by default poll Chasqui and return response. If given a request which specifies another
 *  callback to receive the response, for example your own server, it will show the request in the default QR
 *  modal and then instantly return. You can then handle how to fetch the response specific to your implementation.
 *
 *  @param    {String}       appName                 App name displayed in QR pop over modal
 *  @return   {Function}                             Configured connectTransport function
 *  @param    {String}       request                 uPort client request message
 *  @param    {Object}       [config={}]             Optional config object
 *  @param    {String}       config.data             Additional data to be returned later with response
 *  @return   {Promise<Object, Error>}               Function to close the QR modal
 *  @private
 */


cov_1ytb5bt5lt.s[203]++;
var connectTransport = function connectTransport(appName) {
  cov_1ytb5bt5lt.f[71]++;
  cov_1ytb5bt5lt.s[204]++;
  return function (request, _ref7) {
    var data = _ref7.data,
        cancel = _ref7.cancel;
    cov_1ytb5bt5lt.f[72]++;
    cov_1ytb5bt5lt.s[205]++;

    if (_uportTransports.transport.messageServer.isMessageServerCallback(request)) {
      cov_1ytb5bt5lt.b[74][0]++;
      cov_1ytb5bt5lt.s[206]++;

      return _uportTransports.transport.qr.chasquiSend({ appName: appName })(request).then(function (res) {
        cov_1ytb5bt5lt.f[73]++;
        cov_1ytb5bt5lt.s[207]++;
        return { payload: res, data: data };
      });
    } else {
      cov_1ytb5bt5lt.b[74][1]++;
      cov_1ytb5bt5lt.s[208]++;

      _uportTransports.transport.qr.send(appName)(request, { cancel: cancel });
      // TODO return close QR func?
      cov_1ytb5bt5lt.s[209]++;
      return _promise2.default.resolve({ data: data });
    }
  };
};

/**
 * Wrap push transport from uport-transports, providing stored pushToken and publicEncKey from the
 * provided Connect instance
 * @param   {Connect} connect   The Connect instance holding the pushToken and publicEncKey
 * @returns {Function}          Configured pushTransport function
 * @private
 */
cov_1ytb5bt5lt.s[210]++;
var pushTransport = function pushTransport(pushToken, publicEncKey) {
  cov_1ytb5bt5lt.f[74]++;

  var send = (cov_1ytb5bt5lt.s[211]++, _uportTransports.transport.push.sendAndNotify(pushToken, publicEncKey));

  cov_1ytb5bt5lt.s[212]++;
  return function (request, _ref8) {
    var type = _ref8.type,
        redirectUrl = _ref8.redirectUrl,
        data = _ref8.data;
    cov_1ytb5bt5lt.f[75]++;
    cov_1ytb5bt5lt.s[213]++;

    if (_uportTransports.transport.messageServer.isMessageServerCallback(request)) {
      cov_1ytb5bt5lt.b[75][0]++;
      cov_1ytb5bt5lt.s[214]++;

      return _uportTransports.transport.messageServer.URIHandlerSend(send)(request, { type: type, redirectUrl: redirectUrl }).then(function (res) {
        cov_1ytb5bt5lt.f[76]++;
        cov_1ytb5bt5lt.s[215]++;

        _uportTransports.transport.ui.close();
        cov_1ytb5bt5lt.s[216]++;
        return { payload: res, data: data };
      });
    } else {
      cov_1ytb5bt5lt.b[75][1]++;
      cov_1ytb5bt5lt.s[217]++;

      // Return immediately for custom message server
      send(request, { type: type, redirectUrl: redirectUrl });
      cov_1ytb5bt5lt.s[218]++;
      return _promise2.default.resolve({ data: data });
    }
  };
};

/**
 *  Gets current window url and formats as request callback
 *
 *  @return   {String}   Returns window url formatted as callback
 *  @private
 */
cov_1ytb5bt5lt.s[219]++;
var windowCallback = function windowCallback(id) {
  cov_1ytb5bt5lt.f[77]++;

  var md = (cov_1ytb5bt5lt.s[220]++, new _mobileDetect2.default(navigator.userAgent));
  var chromeAndIOS = (cov_1ytb5bt5lt.s[221]++, (cov_1ytb5bt5lt.b[76][0]++, md.userAgent() === 'Chrome') && (cov_1ytb5bt5lt.b[76][1]++, md.os() === 'iOS'));
  var callback = (cov_1ytb5bt5lt.s[222]++, chromeAndIOS ? (cov_1ytb5bt5lt.b[77][0]++, 'googlechrome:' + window.location.href.substring(window.location.protocol.length)) : (cov_1ytb5bt5lt.b[77][1]++, window.location.href));
  cov_1ytb5bt5lt.s[223]++;
  return _uportTransports.message.util.paramsToUrlFragment(callback, { id: id });
};

exports.default = Connect;